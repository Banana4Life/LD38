// Compiled shader for all platforms

//////////////////////////////////////////////////////////////////////////
// 
// NOTE: This is *not* a valid shader file, the contents are provided just
// for information and for debugging purposes only.
// 
//////////////////////////////////////////////////////////////////////////
// Skipping shader variants that would not be included into build of current scene.

Shader "Lighting Only" {
Properties {
 _Color ("Main Color", Color) = (1.000000,1.000000,1.000000,1.000000)
 _MainTex ("Base (RGB)", 2D) = "white" { }
}
SubShader { 
 Tags { "QUEUE"="Transparent" }


 // Stats for Vertex shader:
 //         d3d9: 66 avg math (43..82), 5 branch
 //        d3d11: 58 avg math (36..72), 1 branch
 //         gles: 3 math, 1 texture
 //     d3d11_9x: 58 avg math (36..72), 1 branch
 // Stats for Fragment shader:
 //         d3d9: 4 math, 1 texture
 //        d3d11: 3 math, 1 texture
 //     d3d11_9x: 3 math, 1 texture
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="Transparent" }
  ZWrite Off
  Blend SrcAlpha One
  ColorMask RGB
  //////////////////////////////////
  //                              //
  //      Compiled programs       //
  //                              //
  //////////////////////////////////
//////////////////////////////////////////////////////
No keywords set in this variant.
-- Vertex shader for "d3d9":
// Stats: 43 math, 5 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixInvV at 20
Matrix4x4 unity_MatrixVP at 24
Matrix4x4 unity_ObjectToWorld at 16
Matrix4x3 unity_WorldToObject at 28
Vector4 _Color at 31
Vector4 _MainTex_ST at 32
Vector4 unity_LightColor[8] at 0
Vector4 unity_LightPosition[8] at 8
VectorInt4 unity_VertexLightParams at 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _MainTex_ST;
//   float4 unity_LightColor[8];
//   float4 unity_LightPosition[8];
//   row_major float4x4 unity_MatrixInvV;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   int4 unity_VertexLightParams;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   unity_VertexLightParams i0       1
//   unity_LightColor        c0       8
//   unity_LightPosition     c8       8
//   unity_ObjectToWorld     c16      4
//   unity_MatrixInvV        c20      4
//   unity_MatrixVP          c24      4
//   unity_WorldToObject     c28      3
//   _Color                  c31      1
//   _MainTex_ST             c32      1
//

    vs_2_0
    def c33, 0, 1, 0.5, 0
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    mov r0, c29
    mul r1.xyz, r0.y, c21
    mad r1.xyz, r0.x, c20, r1
    mad r0.xyz, r0.z, c22, r1
    mad r0.xyz, r0.w, c23, r0
    mul r0.xyz, r0, v1.y
    mov r1, c28
    mul r2.xyz, r1.y, c21
    mad r2.xyz, r1.x, c20, r2
    mad r1.xyz, r1.z, c22, r2
    mad r1.xyz, r1.w, c23, r1
    mad r0.xyz, r1, v1.x, r0
    mov r1, c30
    mul r2.xyz, r1.y, c21
    mad r2.xyz, r1.x, c20, r2
    mad r1.xyz, r1.z, c22, r2
    mad r1.xyz, r1.w, c23, r1
    mad r0.xyz, r1, v1.z, r0
    nrm r1.xyz, r0
    mov r0.xyz, c33.x
    loop aL, i0
      dp3 r0.w, r1, c8[aL]
      max r0.w, r0.w, c33.x
      mul r2.xyz, r0.w, c31
      mul r2.xyz, r2, c0[aL]
      mul r2.xyz, r2, c33.z
      min r2.xyz, r2, c33.y
      add r0.xyz, r0, r2
    endloop
    max r1.xyz, r0, c33.x
    mov r0.x, c33.x
    max r1.w, r0.x, c31.w
    min oD0, r1, c33.y
    mad oT0.xy, v2, c32, c32.zwzw
    mad r0, v0.xyzx, c33.yyyx, c33.xxxy
    dp4 r1.w, c19, r0
    dp4 r1.x, c16, r0
    dp4 r1.y, c17, r0
    dp4 r1.z, c18, r0
    dp4 r3.w, c27, r1
    dp4 r3.x, c24, r1
    dp4 r3.y, c25, r1
    dp4 r3.z, c26, r1
    mad oPos.xy, r3.w, c255, r3
    mov oPos.zw, r3

// approximately 50 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 1 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0.xyz
    dcl t0.xy
    dcl_2d s0
    texld_pp r0, t0, s0
    mul_pp r0.xyz, r0, v0
    mul_pp r1.w, r0.w, c0.w
    add_pp r1.xyz, r0, r0
    mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 36 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[22], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mul r0.xyz, cb2[5].xyzx, cb3[13].yyyy
   1: mad r0.xyz, cb2[4].xyzx, cb3[13].xxxx, r0.xyzx
   2: mad r0.xyz, cb2[6].xyzx, cb3[13].zzzz, r0.xyzx
   3: mad r0.xyz, cb2[7].xyzx, cb3[13].wwww, r0.xyzx
   4: mul r1.xyz, cb2[5].xyzx, cb3[14].yyyy
   5: mad r1.xyz, cb2[4].xyzx, cb3[14].xxxx, r1.xyzx
   6: mad r1.xyz, cb2[6].xyzx, cb3[14].zzzz, r1.xyzx
   7: mad r1.xyz, cb2[7].xyzx, cb3[14].wwww, r1.xyzx
   8: mul r2.xyz, cb2[5].xyzx, cb3[15].yyyy
   9: mad r2.xyz, cb2[4].xyzx, cb3[15].xxxx, r2.xyzx
  10: mad r2.xyz, cb2[6].xyzx, cb3[15].zzzz, r2.xyzx
  11: mad r2.xyz, cb2[7].xyzx, cb3[15].wwww, r2.xyzx
  12: dp3 r0.x, r0.xyzx, v1.xyzx
  13: dp3 r0.y, r1.xyzx, v1.xyzx
  14: dp3 r0.z, r2.xyzx, v1.xyzx
  15: dp3 r0.w, r0.xyzx, r0.xyzx
  16: rsq r0.w, r0.w
  17: mul r0.xyz, r0.wwww, r0.xyzx
  18: mov r1.xyz, l(0,0,0,0)
  19: mov r0.w, l(0)
  20: loop 
  21:   ige r1.w, r0.w, cb0[3].x
  22:   breakc_nz r1.w
  23:   dp3 r1.w, r0.xyzx, cb1[r0.w + 14].xyzx
  24:   max r1.w, r1.w, l(0.000000)
  25:   mul r2.xyz, r1.wwww, cb0[2].xyzx
  26:   mul r2.xyz, r2.xyzx, cb1[r0.w + 6].xyzx
  27:   mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  28:   min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  29:   add r1.xyz, r1.xyzx, r2.xyzx
  30:   iadd r0.w, r0.w, l(1)
  31: endloop 
  32: mov_sat o0.xyz, r1.xyzx
  33: mov_sat o0.w, cb0[2].w
  34: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  35: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  36: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  37: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  38: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  39: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  40: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  41: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  42: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  43: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 3 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _Color;
uniform highp vec4 _MainTex_ST;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  mediump vec3 lcolor_1;
  mediump vec3 eyeNormal_2;
  mediump vec4 color_3;
  highp mat4 m_4;
  m_4 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_5.x = m_4[0].x;
  tmpvar_5.y = m_4[1].x;
  tmpvar_5.z = m_4[2].x;
  tmpvar_5.w = m_4[3].x;
  tmpvar_6.x = m_4[0].y;
  tmpvar_6.y = m_4[1].y;
  tmpvar_6.z = m_4[2].y;
  tmpvar_6.w = m_4[3].y;
  tmpvar_7.x = m_4[0].z;
  tmpvar_7.y = m_4[1].z;
  tmpvar_7.z = m_4[2].z;
  tmpvar_7.w = m_4[3].z;
  highp mat3 tmpvar_8;
  tmpvar_8[0] = tmpvar_5.xyz;
  tmpvar_8[1] = tmpvar_6.xyz;
  tmpvar_8[2] = tmpvar_7.xyz;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((tmpvar_8 * _glesNormal));
  eyeNormal_2 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = unity_LightPosition[0].xyz;
  mediump vec3 dirToLight_11;
  dirToLight_11 = tmpvar_10;
  lcolor_1 = min (((
    (max (dot (eyeNormal_2, dirToLight_11), 0.0) * _Color.xyz)
   * unity_LightColor[0].xyz) * 0.5), vec3(1.0, 1.0, 1.0));
  highp vec3 tmpvar_12;
  tmpvar_12 = unity_LightPosition[1].xyz;
  mediump vec3 dirToLight_13;
  dirToLight_13 = tmpvar_12;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_13), 0.0) * _Color.xyz) * unity_LightColor[1].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_14;
  tmpvar_14 = unity_LightPosition[2].xyz;
  mediump vec3 dirToLight_15;
  dirToLight_15 = tmpvar_14;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_15), 0.0) * _Color.xyz) * unity_LightColor[2].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_16;
  tmpvar_16 = unity_LightPosition[3].xyz;
  mediump vec3 dirToLight_17;
  dirToLight_17 = tmpvar_16;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_17), 0.0) * _Color.xyz) * unity_LightColor[3].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_18;
  tmpvar_18 = unity_LightPosition[4].xyz;
  mediump vec3 dirToLight_19;
  dirToLight_19 = tmpvar_18;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_19), 0.0) * _Color.xyz) * unity_LightColor[4].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_20;
  tmpvar_20 = unity_LightPosition[5].xyz;
  mediump vec3 dirToLight_21;
  dirToLight_21 = tmpvar_20;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_21), 0.0) * _Color.xyz) * unity_LightColor[5].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_22;
  tmpvar_22 = unity_LightPosition[6].xyz;
  mediump vec3 dirToLight_23;
  dirToLight_23 = tmpvar_22;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_23), 0.0) * _Color.xyz) * unity_LightColor[6].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  highp vec3 tmpvar_24;
  tmpvar_24 = unity_LightPosition[7].xyz;
  mediump vec3 dirToLight_25;
  dirToLight_25 = tmpvar_24;
  lcolor_1 = (lcolor_1 + min ((
    ((max (dot (eyeNormal_2, dirToLight_25), 0.0) * _Color.xyz) * unity_LightColor[7].xyz)
   * 0.5), vec3(1.0, 1.0, 1.0)));
  color_3.xyz = lcolor_1;
  color_3.w = _Color.w;
  lowp vec4 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27 = clamp (color_3, 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = _glesVertex.xyz;
  xlv_COLOR0 = tmpvar_26;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_28));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  col_1.xyz = (tmpvar_2 * xlv_COLOR0).xyz;
  col_1.xyz = (col_1 * 2.0).xyz;
  col_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = col_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 36 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Source Reg Component
// ---------- ------- ---------- ---------
// i0         cb0              3         0
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb1             0        22  ( FLT, FLT, FLT, FLT)
// c23        cb0             2         1  ( FLT, FLT, FLT, FLT)
// c24        cb0             4         1  ( FLT, FLT, FLT, FLT)
// c25        cb2             0         8  ( FLT, FLT, FLT, FLT)
// c33        cb3            13         3  ( FLT, FLT, FLT, FLT)
// c36        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c22                             Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          def c40, 0, 1, 0.5, 0
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mov r0, c33
   1:     mul r1.xyz, r0.y, c30
   2:     mad r1.xyz, c29, r0.x, r1
   3:     mad r0.xyz, c31, r0.z, r1
   4:     mad r0.xyz, c32, r0.w, r0
   5:     dp3 r0.x, r0, v1
   6:     mov r1, c34
   7:     mul r2.xyz, r1.y, c30
   8:     mad r2.xyz, c29, r1.x, r2
   9:     mad r1.xyz, c31, r1.z, r2
  10:     mad r1.xyz, c32, r1.w, r1
  11:     dp3 r0.y, r1, v1
  12:     mov r1, c35
  13:     mul r2.xyz, r1.y, c30
  14:     mad r2.xyz, c29, r1.x, r2
  15:     mad r1.xyz, c31, r1.z, r2
  16:     mad r1.xyz, c32, r1.w, r1
  17:     dp3 r0.z, r1, v1
  18:     nrm r1.xyz, r0
  21:     mov r0.xyz, c40.x
  22:     loop aL, i0
  25:       dp3 r0.w, r1, c14[aL]
  26:       max r0.w, r0.w, c40.x
  27:       mul r2.xyz, r0.w, c23
  28:       mul r2.xyz, r2, c6[aL]
  29:       mul r2.xyz, r2, c40.z
  30:       min r2.xyz, r2, c40.y
  31:       add r0.xyz, r0, r2
  32:     endloop
  34:     max r1.xyz, r0, c40.x
  35:     mov r0.x, c40.x
  36:     max r1.w, r0.x, c23.w
  37:     min oT0, r1, c40.y
  38:     mad oT1.xy, v2, c24, c24.zwzw
  39:     mul r0, v0.y, c26
  40:     mad r0, c25, v0.x, r0
  41:     mad r0, c27, v0.z, r0
  42:     add r0, r0, c28
  43:     mul r1, r0.y, c37
  44:     mad r1, c36, r0.x, r1
  45:     mad r1, c38, r0.z, r1
  46:     mad r0, c39, r0.w, r1
  47:     mad oPos.xy, r0.w, c22, r0
  48:     mov oPos.zw, r0

// approximately 49 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[22], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 3
   0: mul r0.xyz, cb2[5].xyzx, cb3[13].yyyy
   1: mad r0.xyz, cb2[4].xyzx, cb3[13].xxxx, r0.xyzx
   2: mad r0.xyz, cb2[6].xyzx, cb3[13].zzzz, r0.xyzx
   3: mad r0.xyz, cb2[7].xyzx, cb3[13].wwww, r0.xyzx
   4: mul r1.xyz, cb2[5].xyzx, cb3[14].yyyy
   5: mad r1.xyz, cb2[4].xyzx, cb3[14].xxxx, r1.xyzx
   6: mad r1.xyz, cb2[6].xyzx, cb3[14].zzzz, r1.xyzx
   7: mad r1.xyz, cb2[7].xyzx, cb3[14].wwww, r1.xyzx
   8: mul r2.xyz, cb2[5].xyzx, cb3[15].yyyy
   9: mad r2.xyz, cb2[4].xyzx, cb3[15].xxxx, r2.xyzx
  10: mad r2.xyz, cb2[6].xyzx, cb3[15].zzzz, r2.xyzx
  11: mad r2.xyz, cb2[7].xyzx, cb3[15].wwww, r2.xyzx
  12: dp3 r0.x, r0.xyzx, v1.xyzx
  13: dp3 r0.y, r1.xyzx, v1.xyzx
  14: dp3 r0.z, r2.xyzx, v1.xyzx
  15: dp3 r0.w, r0.xyzx, r0.xyzx
  16: rsq r0.w, r0.w
  17: mul r0.xyz, r0.wwww, r0.xyzx
  18: mov r1.xyz, l(0,0,0,0)
  19: mov r0.w, l(0)
  20: loop 
  21:   ige r1.w, r0.w, cb0[3].x
  22:   breakc_nz r1.w
  23:   dp3 r1.w, r0.xyzx, cb1[r0.w + 14].xyzx
  24:   max r1.w, r1.w, l(0.000000)
  25:   mul r2.xyz, r1.wwww, cb0[2].xyzx
  26:   mul r2.xyz, r2.xyzx, cb1[r0.w + 6].xyzx
  27:   mul r2.xyz, r2.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
  28:   min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  29:   add r1.xyz, r1.xyzx, r2.xyzx
  30:   iadd r0.w, r0.w, l(1)
  31: endloop 
  32: mov_sat o0.xyz, r1.xyzx
  33: mov_sat o0.w, cb0[2].w
  34: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  35: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  36: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  37: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  38: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  39: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  40: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  41: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  42: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  43: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
   0:     texld_pp r0, t1, s0
   0:     mul_pp r0.xyz, r0, t0
   1:     mul_pp r1.w, r0.w, c0.w
   2:     add_pp r1.xyz, r0, r0
   3:     mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec3 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
int u_xlati15;
mediump float u_xlat16_18;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat0.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat16_3.x = float(0.0);
    u_xlat16_3.y = float(0.0);
    u_xlat16_3.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat16_18 = dot(u_xlat0.xyz, unity_LightPosition[u_xlati_loop_1].xyz);
        u_xlat16_18 = max(u_xlat16_18, 0.0);
        u_xlat16_4.xyz = vec3(u_xlat16_18) * _Color.xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5);
        u_xlat16_4.xyz = min(u_xlat16_4.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    }
    vs_COLOR0.xyz = u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.xyz = min(max(vs_COLOR0.xyz, 0.0), 1.0);
#else
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
#endif
    vs_COLOR0.w = _Color.w;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.w = min(max(vs_COLOR0.w, 0.0), 1.0);
#else
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
#endif
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (496 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 192
  Matrix4x4 unity_WorldToObject at 256
  Matrix4x4 unity_MatrixInvV at 320
  Matrix4x4 unity_MatrixVP at 384
  VectorHalf4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 64
  VectorHalf4 _Color at 448
  VectorInt4 unity_VertexLightParams at 464
  Vector4 _MainTex_ST at 480
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 _Color;
    int4 unity_VertexLightParams;
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    half4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    bool u_xlatb1;
    float3 u_xlat2;
    half3 u_xlat16_3;
    half3 u_xlat16_4;
    float u_xlat15;
    int u_xlati15;
    half u_xlat16_18;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, input.NORMAL0.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, input.NORMAL0.xyz);
    u_xlat0.z = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = rsqrt(u_xlat15);
    u_xlat0.xyz = float3(u_xlat15) * u_xlat0.xyz;
    u_xlat16_3.x = half(0.0);
    u_xlat16_3.y = half(0.0);
    u_xlat16_3.z = half(0.0);
    u_xlati15 = 0x0;
    while(true){
        u_xlatb1 = u_xlati15>=Globals.unity_VertexLightParams.x;
        if(u_xlatb1){break;}
        u_xlat16_18 = dot(u_xlat0.xyz, Globals.unity_LightPosition[u_xlati15].xyz);
        u_xlat16_18 = half(max(float(u_xlat16_18), 0.0));
        u_xlat16_4.xyz = half3(half3(u_xlat16_18) * Globals._Color.xyz);
        u_xlat16_4.xyz = half3(u_xlat16_4.xyz * Globals.unity_LightColor[u_xlati15].xyz);
        u_xlat16_4.xyz = half3(float3(u_xlat16_4.xyz) * float3(0.5, 0.5, 0.5));
        u_xlat16_4.xyz = half3(min(float3(u_xlat16_4.xyz), float3(1.0, 1.0, 1.0)));
        u_xlat16_3.xyz = half3(u_xlat16_3.xyz + u_xlat16_4.xyz);
        u_xlati15 = u_xlati15 + 0x1;
    }
    output.COLOR0.xyz = u_xlat16_3.xyz;
    output.COLOR0.xyz = clamp(output.COLOR0.xyz, 0.0h, 1.0h);
    output.COLOR0.w = Globals._Color.w;
    output.COLOR0.w = clamp(output.COLOR0.w, 0.0h, 1.0h);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (8 bytes) on slot 0 {
  VectorHalf4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    sampler sampler_MainTex [[ sampler (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1.xyz = half3(u_xlat16_0.xyz * input.COLOR0.xyz);
    output.SV_Target0.w = half(u_xlat16_0.w * Globals._Color.w);
    output.SV_Target0.xyz = half3(u_xlat16_1.xyz + u_xlat16_1.xyz);
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat9;
int u_xlati9;
float u_xlat10;
bool u_xlatb10;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat2.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, in_NORMAL0.xyz);
    u_xlat0.y = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat0.z = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat9 = inversesqrt(u_xlat9);
    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat10 = dot(u_xlat0.xyz, unity_LightPosition[u_xlati_loop_1].xyz);
        u_xlat10 = max(u_xlat10, 0.0);
        u_xlat2.xyz = vec3(u_xlat10) * _Color.xyz;
        u_xlat2.xyz = u_xlat2.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat2.xyz = u_xlat2.xyz * vec3(0.5, 0.5, 0.5);
        u_xlat2.xyz = min(u_xlat2.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat1.xyz = u_xlat1.xyz + u_xlat2.xyz;
    }
    vs_COLOR0.xyz = u_xlat1.xyz;
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
    vs_COLOR0.w = _Color.w;
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"
Uses vertex data channel "Vertex"

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals1272627803" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals1272627803" (560 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixInvV at 384
  Matrix4x4 unity_MatrixVP at 448
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Vector4 _Color at 512
  Vector4 _MainTex_ST at 544
  Vector4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 128
  VectorInt4 unity_VertexLightParams at 528
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 351

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 161 250 273 274 286 333
                              Decorate 12 ArrayStride 16
                              Decorate 13 ArrayStride 16
                              Decorate 15 ArrayStride 16
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              MemberDecorate 21 0 RelaxedPrecision
                              MemberDecorate 21 0 Offset 0
                              MemberDecorate 21 1 Offset 128
                              MemberDecorate 21 2 Offset 256
                              MemberDecorate 21 3 Offset 320
                              MemberDecorate 21 4 Offset 384
                              MemberDecorate 21 5 Offset 448
                              MemberDecorate 21 6 RelaxedPrecision
                              MemberDecorate 21 6 Offset 512
                              MemberDecorate 21 7 Offset 528
                              MemberDecorate 21 8 Offset 544
                              Decorate 21 Block
                              Decorate 23 DescriptorSet 1
                              Decorate 23 Binding 1
                              Decorate 161 Location 1
                              Decorate 193 RelaxedPrecision
                              Decorate 212 RelaxedPrecision
                              Decorate 220 RelaxedPrecision
                              Decorate 221 RelaxedPrecision
                              Decorate 222 RelaxedPrecision
                              Decorate 223 RelaxedPrecision
                              Decorate 224 RelaxedPrecision
                              Decorate 227 RelaxedPrecision
                              Decorate 228 RelaxedPrecision
                              Decorate 229 RelaxedPrecision
                              Decorate 230 RelaxedPrecision
                              Decorate 233 RelaxedPrecision
                              Decorate 234 RelaxedPrecision
                              Decorate 235 RelaxedPrecision
                              Decorate 236 RelaxedPrecision
                              Decorate 239 RelaxedPrecision
                              Decorate 240 RelaxedPrecision
                              Decorate 243 RelaxedPrecision
                              Decorate 244 RelaxedPrecision
                              Decorate 245 RelaxedPrecision
                              Decorate 246 RelaxedPrecision
                              Decorate 250 RelaxedPrecision
                              Decorate 250 Location 0
                              Decorate 251 RelaxedPrecision
                              Decorate 254 RelaxedPrecision
                              Decorate 255 RelaxedPrecision
                              Decorate 256 RelaxedPrecision
                              Decorate 257 RelaxedPrecision
                              Decorate 258 RelaxedPrecision
                              Decorate 264 RelaxedPrecision
                              Decorate 268 RelaxedPrecision
                              Decorate 269 RelaxedPrecision
                              Decorate 273 Location 1
                              Decorate 274 Location 2
                              Decorate 286 Location 0
                              MemberDecorate 331 0 BuiltIn Position
                              MemberDecorate 331 1 BuiltIn PointSize
                              MemberDecorate 331 2 BuiltIn ClipDistance
                              Decorate 331 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeInt 32 0
              11:     10(int) Constant 8
              12:             TypeArray 7(fvec4) 11
              13:             TypeArray 7(fvec4) 11
              14:     10(int) Constant 4
              15:             TypeArray 7(fvec4) 14
              16:             TypeArray 7(fvec4) 14
              17:             TypeArray 7(fvec4) 14
              18:             TypeArray 7(fvec4) 14
              19:             TypeInt 32 1
              20:             TypeVector 19(int) 4
              21:             TypeStruct 12 13 15 16 17 18 7(fvec4) 20(ivec4) 7(fvec4)
              22:             TypePointer Uniform 21(struct)
              23:     22(ptr) Variable Uniform
              24:     19(int) Constant 3
              25:     19(int) Constant 1
              26:             TypeVector 6(float) 3
              27:             TypePointer Uniform 7(fvec4)
              31:     19(int) Constant 4
              32:     19(int) Constant 0
              51:     19(int) Constant 2
              76:      8(ptr) Variable Private
             122:             TypePointer Private 26(fvec3)
             123:    122(ptr) Variable Private
             160:             TypePointer Input 26(fvec3)
             161:    160(ptr) Variable Input
             164:     10(int) Constant 0
             165:             TypePointer Private 6(float)
             171:     10(int) Constant 1
             176:     10(int) Constant 2
             178:    165(ptr) Variable Private
             193:    122(ptr) Variable Private
             194:    6(float) Constant 0
             198:             TypePointer Function 19(int)
             206:     19(int) Constant 7
             207:             TypePointer Uniform 19(int)
             210:             TypeBool
             212:    165(ptr) Variable Private
             222:    122(ptr) Variable Private
             225:     19(int) Constant 6
             237:    6(float) Constant 1056964608
             238:   26(fvec3) ConstantComposite 237 237 237
             241:    6(float) Constant 1065353216
             242:   26(fvec3) ConstantComposite 241 241 241
             249:             TypePointer Output 7(fvec4)
             250:    249(ptr) Variable Output
             261:     10(int) Constant 3
             262:             TypePointer Uniform 6(float)
             265:             TypePointer Output 6(float)
             271:             TypeVector 6(float) 2
             272:             TypePointer Output 271(fvec2)
             273:    272(ptr) Variable Output
             274:    160(ptr) Variable Input
             277:     19(int) Constant 8
             286:    160(ptr) Variable Input
             312:     19(int) Constant 5
             330:             TypeArray 6(float) 171
             331:             TypeStruct 7(fvec4) 6(float) 330
             332:             TypePointer Output 331(struct)
             333:    332(ptr) Variable Output
             347:             TypePointer Private 210(bool)
             348:    347(ptr) Variable Private
             349:             TypePointer Private 19(int)
             350:    349(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
             199:    198(ptr) Variable Function
              28:     27(ptr) AccessChain 23 24 25
              29:    7(fvec4) Load 28
              30:   26(fvec3) VectorShuffle 29 29 0 1 2
              33:     27(ptr) AccessChain 23 31 32
              34:    7(fvec4) Load 33
              35:   26(fvec3) VectorShuffle 34 34 1 1 1
              36:   26(fvec3) FMul 30 35
              37:    7(fvec4) Load 9
              38:    7(fvec4) VectorShuffle 37 36 4 5 6 3
                              Store 9 38
              39:     27(ptr) AccessChain 23 24 32
              40:    7(fvec4) Load 39
              41:   26(fvec3) VectorShuffle 40 40 0 1 2
              42:     27(ptr) AccessChain 23 31 32
              43:    7(fvec4) Load 42
              44:   26(fvec3) VectorShuffle 43 43 0 0 0
              45:   26(fvec3) FMul 41 44
              46:    7(fvec4) Load 9
              47:   26(fvec3) VectorShuffle 46 46 0 1 2
              48:   26(fvec3) FAdd 45 47
              49:    7(fvec4) Load 9
              50:    7(fvec4) VectorShuffle 49 48 4 5 6 3
                              Store 9 50
              52:     27(ptr) AccessChain 23 24 51
              53:    7(fvec4) Load 52
              54:   26(fvec3) VectorShuffle 53 53 0 1 2
              55:     27(ptr) AccessChain 23 31 32
              56:    7(fvec4) Load 55
              57:   26(fvec3) VectorShuffle 56 56 2 2 2
              58:   26(fvec3) FMul 54 57
              59:    7(fvec4) Load 9
              60:   26(fvec3) VectorShuffle 59 59 0 1 2
              61:   26(fvec3) FAdd 58 60
              62:    7(fvec4) Load 9
              63:    7(fvec4) VectorShuffle 62 61 4 5 6 3
                              Store 9 63
              64:     27(ptr) AccessChain 23 24 24
              65:    7(fvec4) Load 64
              66:   26(fvec3) VectorShuffle 65 65 0 1 2
              67:     27(ptr) AccessChain 23 31 32
              68:    7(fvec4) Load 67
              69:   26(fvec3) VectorShuffle 68 68 3 3 3
              70:   26(fvec3) FMul 66 69
              71:    7(fvec4) Load 9
              72:   26(fvec3) VectorShuffle 71 71 0 1 2
              73:   26(fvec3) FAdd 70 72
              74:    7(fvec4) Load 9
              75:    7(fvec4) VectorShuffle 74 73 4 5 6 3
                              Store 9 75
              77:     27(ptr) AccessChain 23 24 25
              78:    7(fvec4) Load 77
              79:   26(fvec3) VectorShuffle 78 78 0 1 2
              80:     27(ptr) AccessChain 23 31 25
              81:    7(fvec4) Load 80
              82:   26(fvec3) VectorShuffle 81 81 1 1 1
              83:   26(fvec3) FMul 79 82
              84:    7(fvec4) Load 76
              85:    7(fvec4) VectorShuffle 84 83 4 5 6 3
                              Store 76 85
              86:     27(ptr) AccessChain 23 24 32
              87:    7(fvec4) Load 86
              88:   26(fvec3) VectorShuffle 87 87 0 1 2
              89:     27(ptr) AccessChain 23 31 25
              90:    7(fvec4) Load 89
              91:   26(fvec3) VectorShuffle 90 90 0 0 0
              92:   26(fvec3) FMul 88 91
              93:    7(fvec4) Load 76
              94:   26(fvec3) VectorShuffle 93 93 0 1 2
              95:   26(fvec3) FAdd 92 94
              96:    7(fvec4) Load 76
              97:    7(fvec4) VectorShuffle 96 95 4 5 6 3
                              Store 76 97
              98:     27(ptr) AccessChain 23 24 51
              99:    7(fvec4) Load 98
             100:   26(fvec3) VectorShuffle 99 99 0 1 2
             101:     27(ptr) AccessChain 23 31 25
             102:    7(fvec4) Load 101
             103:   26(fvec3) VectorShuffle 102 102 2 2 2
             104:   26(fvec3) FMul 100 103
             105:    7(fvec4) Load 76
             106:   26(fvec3) VectorShuffle 105 105 0 1 2
             107:   26(fvec3) FAdd 104 106
             108:    7(fvec4) Load 76
             109:    7(fvec4) VectorShuffle 108 107 4 5 6 3
                              Store 76 109
             110:     27(ptr) AccessChain 23 24 24
             111:    7(fvec4) Load 110
             112:   26(fvec3) VectorShuffle 111 111 0 1 2
             113:     27(ptr) AccessChain 23 31 25
             114:    7(fvec4) Load 113
             115:   26(fvec3) VectorShuffle 114 114 3 3 3
             116:   26(fvec3) FMul 112 115
             117:    7(fvec4) Load 76
             118:   26(fvec3) VectorShuffle 117 117 0 1 2
             119:   26(fvec3) FAdd 116 118
             120:    7(fvec4) Load 76
             121:    7(fvec4) VectorShuffle 120 119 4 5 6 3
                              Store 76 121
             124:     27(ptr) AccessChain 23 24 25
             125:    7(fvec4) Load 124
             126:   26(fvec3) VectorShuffle 125 125 0 1 2
             127:     27(ptr) AccessChain 23 31 51
             128:    7(fvec4) Load 127
             129:   26(fvec3) VectorShuffle 128 128 1 1 1
             130:   26(fvec3) FMul 126 129
                              Store 123 130
             131:     27(ptr) AccessChain 23 24 32
             132:    7(fvec4) Load 131
             133:   26(fvec3) VectorShuffle 132 132 0 1 2
             134:     27(ptr) AccessChain 23 31 51
             135:    7(fvec4) Load 134
             136:   26(fvec3) VectorShuffle 135 135 0 0 0
             137:   26(fvec3) FMul 133 136
             138:   26(fvec3) Load 123
             139:   26(fvec3) FAdd 137 138
                              Store 123 139
             140:     27(ptr) AccessChain 23 24 51
             141:    7(fvec4) Load 140
             142:   26(fvec3) VectorShuffle 141 141 0 1 2
             143:     27(ptr) AccessChain 23 31 51
             144:    7(fvec4) Load 143
             145:   26(fvec3) VectorShuffle 144 144 2 2 2
             146:   26(fvec3) FMul 142 145
             147:   26(fvec3) Load 123
             148:   26(fvec3) FAdd 146 147
                              Store 123 148
             149:     27(ptr) AccessChain 23 24 24
             150:    7(fvec4) Load 149
             151:   26(fvec3) VectorShuffle 150 150 0 1 2
             152:     27(ptr) AccessChain 23 31 51
             153:    7(fvec4) Load 152
             154:   26(fvec3) VectorShuffle 153 153 3 3 3
             155:   26(fvec3) FMul 151 154
             156:   26(fvec3) Load 123
             157:   26(fvec3) FAdd 155 156
                              Store 123 157
             158:    7(fvec4) Load 9
             159:   26(fvec3) VectorShuffle 158 158 0 1 2
             162:   26(fvec3) Load 161
             163:    6(float) Dot 159 162
             166:    165(ptr) AccessChain 9 164
                              Store 166 163
             167:    7(fvec4) Load 76
             168:   26(fvec3) VectorShuffle 167 167 0 1 2
             169:   26(fvec3) Load 161
             170:    6(float) Dot 168 169
             172:    165(ptr) AccessChain 9 171
                              Store 172 170
             173:   26(fvec3) Load 123
             174:   26(fvec3) Load 161
             175:    6(float) Dot 173 174
             177:    165(ptr) AccessChain 9 176
                              Store 177 175
             179:    7(fvec4) Load 9
             180:   26(fvec3) VectorShuffle 179 179 0 1 2
             181:    7(fvec4) Load 9
             182:   26(fvec3) VectorShuffle 181 181 0 1 2
             183:    6(float) Dot 180 182
                              Store 178 183
             184:    6(float) Load 178
             185:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 184
                              Store 178 185
             186:    6(float) Load 178
             187:   26(fvec3) CompositeConstruct 186 186 186
             188:    7(fvec4) Load 9
             189:   26(fvec3) VectorShuffle 188 188 0 1 2
             190:   26(fvec3) FMul 187 189
             191:    7(fvec4) Load 9
             192:    7(fvec4) VectorShuffle 191 190 4 5 6 3
                              Store 9 192
             195:    165(ptr) AccessChain 193 164
                              Store 195 194
             196:    165(ptr) AccessChain 193 171
                              Store 196 194
             197:    165(ptr) AccessChain 193 176
                              Store 197 194
                              Store 199 32
                              Branch 200
             200:             Label
                              LoopMerge 202 203 None
                              Branch 204
             204:             Label
             205:     19(int) Load 199
             208:    207(ptr) AccessChain 23 206 164
             209:     19(int) Load 208
             211:   210(bool) SLessThan 205 209
                              BranchConditional 211 201 202
             201:               Label
             213:    7(fvec4)   Load 9
             214:   26(fvec3)   VectorShuffle 213 213 0 1 2
             215:     19(int)   Load 199
             216:     27(ptr)   AccessChain 23 25 215
             217:    7(fvec4)   Load 216
             218:   26(fvec3)   VectorShuffle 217 217 0 1 2
             219:    6(float)   Dot 214 218
                                Store 212 219
             220:    6(float)   Load 212
             221:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 220 194
                                Store 212 221
             223:    6(float)   Load 212
             224:   26(fvec3)   CompositeConstruct 223 223 223
             226:     27(ptr)   AccessChain 23 225
             227:    7(fvec4)   Load 226
             228:   26(fvec3)   VectorShuffle 227 227 0 1 2
             229:   26(fvec3)   FMul 224 228
                                Store 222 229
             230:   26(fvec3)   Load 222
             231:     19(int)   Load 199
             232:     27(ptr)   AccessChain 23 32 231
             233:    7(fvec4)   Load 232
             234:   26(fvec3)   VectorShuffle 233 233 0 1 2
             235:   26(fvec3)   FMul 230 234
                                Store 222 235
             236:   26(fvec3)   Load 222
             239:   26(fvec3)   FMul 236 238
                                Store 222 239
             240:   26(fvec3)   Load 222
             243:   26(fvec3)   ExtInst 1(GLSL.std.450) 37(FMin) 240 242
                                Store 222 243
             244:   26(fvec3)   Load 193
             245:   26(fvec3)   Load 222
             246:   26(fvec3)   FAdd 244 245
                                Store 193 246
                                Branch 203
             203:               Label
             247:     19(int)   Load 199
             248:     19(int)   IAdd 247 25
                                Store 199 248
                                Branch 200
             202:             Label
             251:   26(fvec3) Load 193
             252:    7(fvec4) Load 250
             253:    7(fvec4) VectorShuffle 252 251 4 5 6 3
                              Store 250 253
             254:    7(fvec4) Load 250
             255:   26(fvec3) VectorShuffle 254 254 0 1 2
             256:   26(fvec3) CompositeConstruct 194 194 194
             257:   26(fvec3) CompositeConstruct 241 241 241
             258:   26(fvec3) ExtInst 1(GLSL.std.450) 43(FClamp) 255 256 257
             259:    7(fvec4) Load 250
             260:    7(fvec4) VectorShuffle 259 258 4 5 6 3
                              Store 250 260
             263:    262(ptr) AccessChain 23 225 261
             264:    6(float) Load 263
             266:    265(ptr) AccessChain 250 261
                              Store 266 264
             267:    265(ptr) AccessChain 250 261
             268:    6(float) Load 267
             269:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 268 194 241
             270:    265(ptr) AccessChain 250 261
                              Store 270 269
             275:   26(fvec3) Load 274
             276:  271(fvec2) VectorShuffle 275 275 0 1
             278:     27(ptr) AccessChain 23 277
             279:    7(fvec4) Load 278
             280:  271(fvec2) VectorShuffle 279 279 0 1
             281:  271(fvec2) FMul 276 280
             282:     27(ptr) AccessChain 23 277
             283:    7(fvec4) Load 282
             284:  271(fvec2) VectorShuffle 283 283 2 3
             285:  271(fvec2) FAdd 281 284
                              Store 273 285
             287:   26(fvec3) Load 286
             288:    7(fvec4) VectorShuffle 287 287 1 1 1 1
             289:     27(ptr) AccessChain 23 51 25
             290:    7(fvec4) Load 289
             291:    7(fvec4) FMul 288 290
                              Store 9 291
             292:     27(ptr) AccessChain 23 51 32
             293:    7(fvec4) Load 292
             294:   26(fvec3) Load 286
             295:    7(fvec4) VectorShuffle 294 294 0 0 0 0
             296:    7(fvec4) FMul 293 295
             297:    7(fvec4) Load 9
             298:    7(fvec4) FAdd 296 297
                              Store 9 298
             299:     27(ptr) AccessChain 23 51 51
             300:    7(fvec4) Load 299
             301:   26(fvec3) Load 286
             302:    7(fvec4) VectorShuffle 301 301 2 2 2 2
             303:    7(fvec4) FMul 300 302
             304:    7(fvec4) Load 9
             305:    7(fvec4) FAdd 303 304
                              Store 9 305
             306:    7(fvec4) Load 9
             307:     27(ptr) AccessChain 23 51 24
             308:    7(fvec4) Load 307
             309:    7(fvec4) FAdd 306 308
                              Store 9 309
             310:    7(fvec4) Load 9
             311:    7(fvec4) VectorShuffle 310 310 1 1 1 1
             313:     27(ptr) AccessChain 23 312 25
             314:    7(fvec4) Load 313
             315:    7(fvec4) FMul 311 314
                              Store 76 315
             316:     27(ptr) AccessChain 23 312 32
             317:    7(fvec4) Load 316
             318:    7(fvec4) Load 9
             319:    7(fvec4) VectorShuffle 318 318 0 0 0 0
             320:    7(fvec4) FMul 317 319
             321:    7(fvec4) Load 76
             322:    7(fvec4) FAdd 320 321
                              Store 76 322
             323:     27(ptr) AccessChain 23 312 51
             324:    7(fvec4) Load 323
             325:    7(fvec4) Load 9
             326:    7(fvec4) VectorShuffle 325 325 2 2 2 2
             327:    7(fvec4) FMul 324 326
             328:    7(fvec4) Load 76
             329:    7(fvec4) FAdd 327 328
                              Store 76 329
             334:     27(ptr) AccessChain 23 312 24
             335:    7(fvec4) Load 334
             336:    7(fvec4) Load 9
             337:    7(fvec4) VectorShuffle 336 336 3 3 3 3
             338:    7(fvec4) FMul 335 337
             339:    7(fvec4) Load 76
             340:    7(fvec4) FAdd 338 339
             341:    249(ptr) AccessChain 333 32
                              Store 341 340
             342:    265(ptr) AccessChain 333 32 171
             343:    6(float) Load 342
             344:    6(float) FNegate 343
             345:    265(ptr) AccessChain 333 32 171
                              Store 345 344
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 54

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 26 31
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 1
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 24 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              Decorate 26 Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31 RelaxedPrecision
                              Decorate 31 Location 0
                              Decorate 36 RelaxedPrecision
                              MemberDecorate 37 0 RelaxedPrecision
                              MemberDecorate 37 0 Offset 0
                              Decorate 37 Block
                              Decorate 39 DescriptorSet 1
                              Decorate 39 Binding 0
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:             TypeVector 6(float) 3
              21:             TypePointer Private 20(fvec3)
              22:     21(ptr) Variable Private
              25:             TypePointer Input 7(fvec4)
              26:     25(ptr) Variable Input
              30:             TypePointer Output 7(fvec4)
              31:     30(ptr) Variable Output
              32:             TypeInt 32 0
              33:     32(int) Constant 3
              34:             TypePointer Private 6(float)
              37:             TypeStruct 7(fvec4)
              38:             TypePointer Uniform 37(struct)
              39:     38(ptr) Variable Uniform
              40:             TypeInt 32 1
              41:     40(int) Constant 0
              42:             TypePointer Uniform 6(float)
              46:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              23:    7(fvec4) Load 9
              24:   20(fvec3) VectorShuffle 23 23 0 1 2
              27:    7(fvec4) Load 26
              28:   20(fvec3) VectorShuffle 27 27 0 1 2
              29:   20(fvec3) FMul 24 28
                              Store 22 29
              35:     34(ptr) AccessChain 9 33
              36:    6(float) Load 35
              43:     42(ptr) AccessChain 39 41 33
              44:    6(float) Load 43
              45:    6(float) FMul 36 44
              47:     46(ptr) AccessChain 31 33
                              Store 47 45
              48:   20(fvec3) Load 22
              49:   20(fvec3) Load 22
              50:   20(fvec3) FAdd 48 49
              51:    7(fvec4) Load 31
              52:    7(fvec4) VectorShuffle 51 50 4 5 6 3
                              Store 31 52
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

//////////////////////////////////////////////////////
Keywords set in this variant: POINT 
-- Vertex shader for "d3d9":
// Stats: 75 math, 5 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixInvV at 28
Matrix4x3 unity_MatrixV at 39
Matrix4x4 unity_MatrixVP at 32
Matrix4x4 unity_ObjectToWorld at 24
Matrix4x3 unity_WorldToObject at 36
Vector4 _Color at 42
Vector4 _MainTex_ST at 43
Vector4 unity_LightAtten[8] at 16
Vector4 unity_LightColor[8] at 0
Vector4 unity_LightPosition[8] at 8
VectorInt4 unity_VertexLightParams at 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _MainTex_ST;
//   float4 unity_LightAtten[8];
//   float4 unity_LightColor[8];
//   float4 unity_LightPosition[8];
//   row_major float4x4 unity_MatrixInvV;
//   row_major float4x4 unity_MatrixV;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   int4 unity_VertexLightParams;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   unity_VertexLightParams i0       1
//   unity_LightColor        c0       8
//   unity_LightPosition     c8       8
//   unity_LightAtten        c16      8
//   unity_ObjectToWorld     c24      4
//   unity_MatrixInvV        c28      4
//   unity_MatrixVP          c32      4
//   unity_WorldToObject     c36      3
//   unity_MatrixV           c39      3
//   _Color                  c42      1
//   _MainTex_ST             c43      1
//

    vs_2_0
    def c44, 1, 0, 9.99999997e-007, 0.5
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    mad oT0.xy, v2, c43, c43.zwzw
    mov r0, c37
    mul r1.xyz, r0.y, c29
    mad r1.xyz, r0.x, c28, r1
    mad r0.xyz, r0.z, c30, r1
    mad r0.xyz, r0.w, c31, r0
    mul r0.xyz, r0, v1.y
    mov r1, c36
    mul r2.xyz, r1.y, c29
    mad r2.xyz, r1.x, c28, r2
    mad r1.xyz, r1.z, c30, r2
    mad r1.xyz, r1.w, c31, r1
    mad r0.xyz, r1, v1.x, r0
    mov r1, c38
    mul r2.xyz, r1.y, c29
    mad r2.xyz, r1.x, c28, r2
    mad r1.xyz, r1.z, c30, r2
    mad r1.xyz, r1.w, c31, r1
    mad r0.xyz, r1, v1.z, r0
    nrm r1.xyz, r0
    mov r0, c39
    mul r2, r0.y, c25
    mad r2, r0.x, c24, r2
    mad r2, r0.z, c26, r2
    mad r0, r0.w, c27, r2
    mad r2, v0.xyzx, c44.xxxy, c44.yyyx
    dp4 r0.x, r0, r2
    mov r3, c40
    mul r4, r3.y, c25
    mad r4, r3.x, c24, r4
    mad r4, r3.z, c26, r4
    mad r3, r3.w, c27, r4
    dp4 r0.y, r3, r2
    mov r3, c41
    mul r4, r3.y, c25
    mad r4, r3.x, c24, r4
    mad r4, r3.z, c26, r4
    mad r3, r3.w, c27, r4
    dp4 r0.z, r3, r2
    mov r3.xyz, c44.y
    loop aL, i0
      mad r4.xyz, r0, -c8[aL].w, c8[aL]
      dp3 r0.w, r4, r4
      max r1.w, r0.w, c44.z
      rsq r1.w, r1.w
      mul r4.xyz, r1.w, r4
      dp3 r1.w, r1, r4
      mul r3.w, c8[aL].w, c8[aL].w
      slt r3.w, -r3.w, r3.w
      slt r4.x, c16[aL].w, r0.w
      mul r3.w, r3.w, r4.x
      mul r0.w, r0.w, c16[aL].z
      add r0.w, r0.w, c44.x
      rcp r0.w, r0.w
      mad r0.w, r3.w, -r0.w, r0.w
      mul r0.w, r0.w, c44.w
      max r1.w, r1.w, c44.y
      mul r4.xyz, r1.w, c42
      mul r4.xyz, r4, c0[aL]
      mul r4.xyz, r0.w, r4
      min r4.xyz, r4, c44.x
      add r3.xyz, r3, r4
    endloop
    dp4 r0.w, c27, r2
    dp4 r0.x, c24, r2
    dp4 r0.y, c25, r2
    dp4 r0.z, c26, r2
    dp4 r5.w, c35, r0
    max r1.xyz, r3, c44.y
    mov r2.y, c44.y
    max r1.w, r2.y, c42.w
    min oD0, r1, c44.x
    dp4 r5.x, c32, r0
    dp4 r5.y, c33, r0
    dp4 r5.z, c34, r0
    mad oPos.xy, r5.w, c255, r5
    mov oPos.zw, r5

// approximately 82 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 1 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0.xyz
    dcl t0.xy
    dcl_2d s0
    texld_pp r0, t0, s0
    mul_pp r0.xyz, r0, v0
    mul_pp r1.w, r0.w, c0.w
    add_pp r1.xyz, r0, r0
    mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 67 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
  Vector4 unity_LightAtten[8] at 352
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[30], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 5
   0: mul r0.xyz, cb2[0].yyyy, cb3[10].xyzx
   1: mad r0.xyz, cb3[9].xyzx, cb2[0].xxxx, r0.xyzx
   2: mad r0.xyz, cb3[11].xyzx, cb2[0].zzzz, r0.xyzx
   3: mad r0.xyz, cb3[12].xyzx, cb2[0].wwww, r0.xyzx
   4: mul r1.xyz, cb2[1].yyyy, cb3[10].xyzx
   5: mad r1.xyz, cb3[9].xyzx, cb2[1].xxxx, r1.xyzx
   6: mad r1.xyz, cb3[11].xyzx, cb2[1].zzzz, r1.xyzx
   7: mad r1.xyz, cb3[12].xyzx, cb2[1].wwww, r1.xyzx
   8: mul r2.xyz, cb2[2].yyyy, cb3[10].xyzx
   9: mad r2.xyz, cb3[9].xyzx, cb2[2].xxxx, r2.xyzx
  10: mad r2.xyz, cb3[11].xyzx, cb2[2].zzzz, r2.xyzx
  11: mad r2.xyz, cb3[12].xyzx, cb2[2].wwww, r2.xyzx
  12: mul r3.xyz, cb2[3].yyyy, cb3[10].xyzx
  13: mad r3.xyz, cb3[9].xyzx, cb2[3].xxxx, r3.xyzx
  14: mad r3.xyz, cb3[11].xyzx, cb2[3].zzzz, r3.xyzx
  15: mad r3.xyz, cb3[12].xyzx, cb2[3].wwww, r3.xyzx
  16: mul r1.xyz, r1.xyzx, v0.yyyy
  17: mad r0.xyz, r0.xyzx, v0.xxxx, r1.xyzx
  18: mad r0.xyz, r2.xyzx, v0.zzzz, r0.xyzx
  19: add r0.xyz, r3.xyzx, r0.xyzx
  20: mul r1.xyz, cb2[5].xyzx, cb3[13].yyyy
  21: mad r1.xyz, cb2[4].xyzx, cb3[13].xxxx, r1.xyzx
  22: mad r1.xyz, cb2[6].xyzx, cb3[13].zzzz, r1.xyzx
  23: mad r1.xyz, cb2[7].xyzx, cb3[13].wwww, r1.xyzx
  24: mul r2.xyz, cb2[5].xyzx, cb3[14].yyyy
  25: mad r2.xyz, cb2[4].xyzx, cb3[14].xxxx, r2.xyzx
  26: mad r2.xyz, cb2[6].xyzx, cb3[14].zzzz, r2.xyzx
  27: mad r2.xyz, cb2[7].xyzx, cb3[14].wwww, r2.xyzx
  28: mul r3.xyz, cb2[5].xyzx, cb3[15].yyyy
  29: mad r3.xyz, cb2[4].xyzx, cb3[15].xxxx, r3.xyzx
  30: mad r3.xyz, cb2[6].xyzx, cb3[15].zzzz, r3.xyzx
  31: mad r3.xyz, cb2[7].xyzx, cb3[15].wwww, r3.xyzx
  32: dp3 r1.x, r1.xyzx, v1.xyzx
  33: dp3 r1.y, r2.xyzx, v1.xyzx
  34: dp3 r1.z, r3.xyzx, v1.xyzx
  35: dp3 r0.w, r1.xyzx, r1.xyzx
  36: rsq r0.w, r0.w
  37: mul r1.xyz, r0.wwww, r1.xyzx
  38: mov r2.xyz, l(0,0,0,0)
  39: mov r0.w, l(0)
  40: loop 
  41:   ige r1.w, r0.w, cb0[3].x
  42:   breakc_nz r1.w
  43:   mad r3.xyz, -r0.xyzx, cb1[r0.w + 14].wwww, cb1[r0.w + 14].xyzx
  44:   dp3 r1.w, r3.xyzx, r3.xyzx
  45:   mad r2.w, cb1[r0.w + 22].z, r1.w, l(1.000000)
  46:   div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  47:   ne r3.w, l(0.000000), cb1[r0.w + 14].w
  48:   lt r4.x, cb1[r0.w + 22].w, r1.w
  49:   and r3.w, r3.w, r4.x
  50:   max r1.w, r1.w, l(0.000001)
  51:   rsq r1.w, r1.w
  52:   mul r3.xyz, r1.wwww, r3.xyzx
  53:   mul r1.w, r2.w, l(0.500000)
  54:   movc r1.w, r3.w, l(0), r1.w
  55:   dp3 r2.w, r1.xyzx, r3.xyzx
  56:   max r2.w, r2.w, l(0.000000)
  57:   mul r3.xyz, r2.wwww, cb0[2].xyzx
  58:   mul r3.xyz, r3.xyzx, cb1[r0.w + 6].xyzx
  59:   mul r3.xyz, r1.wwww, r3.xyzx
  60:   min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  61:   add r2.xyz, r2.xyzx, r3.xyzx
  62:   iadd r0.w, r0.w, l(1)
  63: endloop 
  64: mov_sat o0.xyz, r2.xyzx
  65: mov_sat o0.w, cb0[2].w
  66: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  67: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  68: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  69: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  70: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  71: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  72: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  73: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  74: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  75: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 3 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _Color;
uniform highp vec4 _MainTex_ST;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesVertex.xyz;
  mediump vec3 lcolor_3;
  mediump vec3 eyeNormal_4;
  highp vec3 eyePos_5;
  mediump vec4 color_6;
  color_6 = vec4(0.0, 0.0, 0.0, 1.1);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1;
  eyePos_5 = ((unity_MatrixV * unity_ObjectToWorld) * tmpvar_7).xyz;
  highp mat4 m_8;
  m_8 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_9.x = m_8[0].x;
  tmpvar_9.y = m_8[1].x;
  tmpvar_9.z = m_8[2].x;
  tmpvar_9.w = m_8[3].x;
  tmpvar_10.x = m_8[0].y;
  tmpvar_10.y = m_8[1].y;
  tmpvar_10.z = m_8[2].y;
  tmpvar_10.w = m_8[3].y;
  tmpvar_11.x = m_8[0].z;
  tmpvar_11.y = m_8[1].z;
  tmpvar_11.z = m_8[2].z;
  tmpvar_11.w = m_8[3].z;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_9.xyz;
  tmpvar_12[1] = tmpvar_10.xyz;
  tmpvar_12[2] = tmpvar_11.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_12 * _glesNormal));
  eyeNormal_4 = tmpvar_13;
  lcolor_3 = vec3(0.0, 0.0, 0.0);
  for (highp int il_2 = 0; il_2 < 8; il_2++) {
    mediump float att_14;
    highp vec3 dirToLight_15;
    dirToLight_15 = (unity_LightPosition[il_2].xyz - (eyePos_5 * unity_LightPosition[il_2].w));
    highp float tmpvar_16;
    tmpvar_16 = dot (dirToLight_15, dirToLight_15);
    att_14 = (1.0/((1.0 + (unity_LightAtten[il_2].z * tmpvar_16))));
    if (((unity_LightPosition[il_2].w != 0.0) && (tmpvar_16 > unity_LightAtten[il_2].w))) {
      att_14 = 0.0;
    };
    dirToLight_15 = (dirToLight_15 * inversesqrt(max (tmpvar_16, 1e-06)));
    att_14 = (att_14 * 0.5);
    mediump vec3 dirToLight_17;
    dirToLight_17 = dirToLight_15;
    lcolor_3 = (lcolor_3 + min ((
      ((max (dot (eyeNormal_4, dirToLight_17), 0.0) * _Color.xyz) * unity_LightColor[il_2].xyz)
     * att_14), vec3(1.0, 1.0, 1.0)));
  };
  color_6.xyz = lcolor_3;
  color_6.w = _Color.w;
  lowp vec4 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19 = clamp (color_6, 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_18;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_20));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  col_1.xyz = (tmpvar_2 * xlv_COLOR0).xyz;
  col_1.xyz = (col_1 * 2.0).xyz;
  col_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = col_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 67 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
  Vector4 unity_LightAtten[8] at 352
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Source Reg Component
// ---------- ------- ---------- ---------
// i0         cb0              3         0
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb1             0        30  ( FLT, FLT, FLT, FLT)
// c31        cb0             2         1  ( FLT, FLT, FLT, FLT)
// c32        cb0             4         1  ( FLT, FLT, FLT, FLT)
// c33        cb2             0         8  ( FLT, FLT, FLT, FLT)
// c41        cb3             9         7  ( FLT, FLT, FLT, FLT)
// c48        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c30                             Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          def c52, 0, 1, 9.99999997e-007, 0.5
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mov r0, c34
   1:     mul r1.xyz, r0.y, c42
   2:     mad r1.xyz, c41, r0.x, r1
   3:     mad r0.xyz, c43, r0.z, r1
   4:     mad r0.xyz, c44, r0.w, r0
   5:     mul r0.xyz, r0, v0.y
   6:     mov r1, c33
   7:     mul r2.xyz, r1.y, c42
   8:     mad r2.xyz, c41, r1.x, r2
   9:     mad r1.xyz, c43, r1.z, r2
  10:     mad r1.xyz, c44, r1.w, r1
  11:     mad r0.xyz, r1, v0.x, r0
  12:     mov r1, c35
  13:     mul r2.xyz, r1.y, c42
  14:     mad r2.xyz, c41, r1.x, r2
  15:     mad r1.xyz, c43, r1.z, r2
  16:     mad r1.xyz, c44, r1.w, r1
  17:     mad r0.xyz, r1, v0.z, r0
  18:     mov r1, c36
  19:     mul r2.xyz, r1.y, c42
  20:     mad r2.xyz, c41, r1.x, r2
  21:     mad r1.xyz, c43, r1.z, r2
  22:     mad r1.xyz, c44, r1.w, r1
  23:     add r0.xyz, r0, r1
  24:     mov r1, c45
  25:     mul r2.xyz, r1.y, c38
  26:     mad r2.xyz, c37, r1.x, r2
  27:     mad r1.xyz, c39, r1.z, r2
  28:     mad r1.xyz, c40, r1.w, r1
  29:     dp3 r1.x, r1, v1
  30:     mov r2, c46
  31:     mul r3.xyz, r2.y, c38
  32:     mad r3.xyz, c37, r2.x, r3
  33:     mad r2.xyz, c39, r2.z, r3
  34:     mad r2.xyz, c40, r2.w, r2
  35:     dp3 r1.y, r2, v1
  36:     mov r2, c47
  37:     mul r3.xyz, r2.y, c38
  38:     mad r3.xyz, c37, r2.x, r3
  39:     mad r2.xyz, c39, r2.z, r3
  40:     mad r2.xyz, c40, r2.w, r2
  41:     dp3 r1.z, r2, v1
  42:     nrm r2.xyz, r1
  45:     mov r1.xyz, c52.x
  46:     loop aL, i0
  49:       mad r3.xyz, r0, -c14[aL].w, c14[aL]
  50:       dp3 r0.w, r3, r3
  51:       max r1.w, r0.w, c52.z
  52:       rsq r1.w, r1.w
  53:       mul r3.xyz, r1.w, r3
  54:       dp3 r1.w, r2, r3
  55:       mul r2.w, c14[aL].w, c14[aL].w
  56:       slt r2.w, -r2.w, r2.w
  57:       slt r3.x, c22[aL].w, r0.w
  58:       mul r2.w, r2.w, r3.x
  59:       mul r0.w, r0.w, c22[aL].z
  60:       add r0.w, r0.w, c52.y
  61:       rcp r0.w, r0.w
  62:       mad r0.w, r2.w, -r0.w, r0.w
  63:       mul r0.w, r0.w, c52.w
  64:       max r1.w, r1.w, c52.x
  65:       mul r3.xyz, r1.w, c31
  66:       mul r3.xyz, r3, c6[aL]
  67:       mul r3.xyz, r0.w, r3
  68:       min r3.xyz, r3, c52.y
  69:       add r1.xyz, r1, r3
  70:     endloop
  72:     max r0.xyz, r1, c52.x
  73:     mov r1.x, c52.x
  74:     max r0.w, r1.x, c31.w
  75:     min oT0, r0, c52.y
  76:     mad oT1.xy, v2, c32, c32.zwzw
  77:     mul r0, v0.y, c34
  78:     mad r0, c33, v0.x, r0
  79:     mad r0, c35, v0.z, r0
  80:     add r0, r0, c36
  81:     mul r1, r0.y, c49
  82:     mad r1, c48, r0.x, r1
  83:     mad r1, c50, r0.z, r1
  84:     mad r0, c51, r0.w, r1
  85:     mad oPos.xy, r0.w, c30, r0
  86:     mov oPos.zw, r0

// approximately 87 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[30], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 5
   0: mul r0.xyz, cb2[0].yyyy, cb3[10].xyzx
   1: mad r0.xyz, cb3[9].xyzx, cb2[0].xxxx, r0.xyzx
   2: mad r0.xyz, cb3[11].xyzx, cb2[0].zzzz, r0.xyzx
   3: mad r0.xyz, cb3[12].xyzx, cb2[0].wwww, r0.xyzx
   4: mul r1.xyz, cb2[1].yyyy, cb3[10].xyzx
   5: mad r1.xyz, cb3[9].xyzx, cb2[1].xxxx, r1.xyzx
   6: mad r1.xyz, cb3[11].xyzx, cb2[1].zzzz, r1.xyzx
   7: mad r1.xyz, cb3[12].xyzx, cb2[1].wwww, r1.xyzx
   8: mul r2.xyz, cb2[2].yyyy, cb3[10].xyzx
   9: mad r2.xyz, cb3[9].xyzx, cb2[2].xxxx, r2.xyzx
  10: mad r2.xyz, cb3[11].xyzx, cb2[2].zzzz, r2.xyzx
  11: mad r2.xyz, cb3[12].xyzx, cb2[2].wwww, r2.xyzx
  12: mul r3.xyz, cb2[3].yyyy, cb3[10].xyzx
  13: mad r3.xyz, cb3[9].xyzx, cb2[3].xxxx, r3.xyzx
  14: mad r3.xyz, cb3[11].xyzx, cb2[3].zzzz, r3.xyzx
  15: mad r3.xyz, cb3[12].xyzx, cb2[3].wwww, r3.xyzx
  16: mul r1.xyz, r1.xyzx, v0.yyyy
  17: mad r0.xyz, r0.xyzx, v0.xxxx, r1.xyzx
  18: mad r0.xyz, r2.xyzx, v0.zzzz, r0.xyzx
  19: add r0.xyz, r3.xyzx, r0.xyzx
  20: mul r1.xyz, cb2[5].xyzx, cb3[13].yyyy
  21: mad r1.xyz, cb2[4].xyzx, cb3[13].xxxx, r1.xyzx
  22: mad r1.xyz, cb2[6].xyzx, cb3[13].zzzz, r1.xyzx
  23: mad r1.xyz, cb2[7].xyzx, cb3[13].wwww, r1.xyzx
  24: mul r2.xyz, cb2[5].xyzx, cb3[14].yyyy
  25: mad r2.xyz, cb2[4].xyzx, cb3[14].xxxx, r2.xyzx
  26: mad r2.xyz, cb2[6].xyzx, cb3[14].zzzz, r2.xyzx
  27: mad r2.xyz, cb2[7].xyzx, cb3[14].wwww, r2.xyzx
  28: mul r3.xyz, cb2[5].xyzx, cb3[15].yyyy
  29: mad r3.xyz, cb2[4].xyzx, cb3[15].xxxx, r3.xyzx
  30: mad r3.xyz, cb2[6].xyzx, cb3[15].zzzz, r3.xyzx
  31: mad r3.xyz, cb2[7].xyzx, cb3[15].wwww, r3.xyzx
  32: dp3 r1.x, r1.xyzx, v1.xyzx
  33: dp3 r1.y, r2.xyzx, v1.xyzx
  34: dp3 r1.z, r3.xyzx, v1.xyzx
  35: dp3 r0.w, r1.xyzx, r1.xyzx
  36: rsq r0.w, r0.w
  37: mul r1.xyz, r0.wwww, r1.xyzx
  38: mov r2.xyz, l(0,0,0,0)
  39: mov r0.w, l(0)
  40: loop 
  41:   ige r1.w, r0.w, cb0[3].x
  42:   breakc_nz r1.w
  43:   mad r3.xyz, -r0.xyzx, cb1[r0.w + 14].wwww, cb1[r0.w + 14].xyzx
  44:   dp3 r1.w, r3.xyzx, r3.xyzx
  45:   mad r2.w, cb1[r0.w + 22].z, r1.w, l(1.000000)
  46:   div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  47:   ne r3.w, l(0.000000), cb1[r0.w + 14].w
  48:   lt r4.x, cb1[r0.w + 22].w, r1.w
  49:   and r3.w, r3.w, r4.x
  50:   max r1.w, r1.w, l(0.000001)
  51:   rsq r1.w, r1.w
  52:   mul r3.xyz, r1.wwww, r3.xyzx
  53:   mul r1.w, r2.w, l(0.500000)
  54:   movc r1.w, r3.w, l(0), r1.w
  55:   dp3 r2.w, r1.xyzx, r3.xyzx
  56:   max r2.w, r2.w, l(0.000000)
  57:   mul r3.xyz, r2.wwww, cb0[2].xyzx
  58:   mul r3.xyz, r3.xyzx, cb1[r0.w + 6].xyzx
  59:   mul r3.xyz, r1.wwww, r3.xyzx
  60:   min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  61:   add r2.xyz, r2.xyzx, r3.xyzx
  62:   iadd r0.w, r0.w, l(1)
  63: endloop 
  64: mov_sat o0.xyz, r2.xyzx
  65: mov_sat o0.w, cb0[2].w
  66: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  67: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  68: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  69: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  70: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  71: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  72: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  73: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  74: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  75: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
   0:     texld_pp r0, t1, s0
   0:     mul_pp r0.xyz, r0, t0
   1:     mul_pp r1.w, r0.w, c0.w
   2:     add_pp r1.xyz, r0, r0
   3:     mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec3 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb9;
float u_xlat18;
int u_xlati18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, in_NORMAL0.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat16_4.x = float(0.0);
    u_xlat16_4.y = float(0.0);
    u_xlat16_4.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat20 = unity_LightAtten[u_xlati_loop_1].z * u_xlat19 + 1.0;
        u_xlat20 = float(1.0) / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(0.0!=unity_LightPosition[u_xlati_loop_1].w);
#else
        u_xlatb3 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(unity_LightAtten[u_xlati_loop_1].w<u_xlat19);
#else
        u_xlatb9 = unity_LightAtten[u_xlati_loop_1].w<u_xlat19;
#endif
        u_xlatb3 = u_xlatb9 && u_xlatb3;
        u_xlat19 = max(u_xlat19, 9.99999997e-007);
        u_xlat19 = inversesqrt(u_xlat19);
        u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
        u_xlat19 = u_xlat20 * 0.5;
        u_xlat16_22 = (u_xlatb3) ? 0.0 : u_xlat19;
        u_xlat16_5.x = dot(u_xlat1.xyz, u_xlat2.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
        u_xlat16_5.xyz = u_xlat16_5.xxx * _Color.xyz;
        u_xlat16_5.xyz = u_xlat16_5.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
        u_xlat16_5.xyz = min(u_xlat16_5.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    }
    vs_COLOR0.xyz = u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.xyz = min(max(vs_COLOR0.xyz, 0.0), 1.0);
#else
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
#endif
    vs_COLOR0.w = _Color.w;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.w = min(max(vs_COLOR0.w, 0.0), 1.0);
#else
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
#endif
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (624 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 256
  Matrix4x4 unity_WorldToObject at 320
  Matrix4x4 unity_MatrixV at 384
  Matrix4x4 unity_MatrixInvV at 448
  Matrix4x4 unity_MatrixVP at 512
  VectorHalf4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 64
  VectorHalf4 unity_LightAtten[8] at 192
  VectorHalf4 _Color at 576
  VectorInt4 unity_VertexLightParams at 592
  Vector4 _MainTex_ST at 608
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 _Color;
    int4 unity_VertexLightParams;
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    half4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    bool u_xlatb9;
    float u_xlat18;
    int u_xlati18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    half u_xlat16_22;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * input.POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * input.POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, input.NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat1.xyz;
    u_xlat16_4.x = half(0.0);
    u_xlat16_4.y = half(0.0);
    u_xlat16_4.z = half(0.0);
    u_xlati18 = 0x0;
    while(true){
        u_xlatb19 = u_xlati18>=Globals.unity_VertexLightParams.x;
        if(u_xlatb19){break;}
        u_xlat2.xyz = (-u_xlat0.xyz) * Globals.unity_LightPosition[u_xlati18].www + Globals.unity_LightPosition[u_xlati18].xyz;
        u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat20 = float(Globals.unity_LightAtten[u_xlati18].z) * u_xlat19 + 1.0;
        u_xlat20 = float(1.0) / u_xlat20;
        u_xlatb3 = 0.0!=Globals.unity_LightPosition[u_xlati18].w;
        u_xlatb9 = Globals.unity_LightAtten[u_xlati18].w<half(u_xlat19);
        u_xlatb3 = u_xlatb9 && u_xlatb3;
        u_xlat19 = max(u_xlat19, 9.99999997e-007);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat2.xyz = float3(u_xlat19) * u_xlat2.xyz;
        u_xlat19 = u_xlat20 * 0.5;
        u_xlat16_22 = (u_xlatb3) ? 0.0 : half(u_xlat19);
        u_xlat16_5.x = dot(u_xlat1.xyz, u_xlat2.xyz);
        u_xlat16_5.x = half(max(float(u_xlat16_5.x), 0.0));
        u_xlat16_5.xyz = half3(u_xlat16_5.xxx * Globals._Color.xyz);
        u_xlat16_5.xyz = half3(u_xlat16_5.xyz * Globals.unity_LightColor[u_xlati18].xyz);
        u_xlat16_5.xyz = half3(half3(u_xlat16_22) * u_xlat16_5.xyz);
        u_xlat16_5.xyz = half3(min(float3(u_xlat16_5.xyz), float3(1.0, 1.0, 1.0)));
        u_xlat16_4.xyz = half3(u_xlat16_4.xyz + u_xlat16_5.xyz);
        u_xlati18 = u_xlati18 + 0x1;
    }
    output.COLOR0.xyz = u_xlat16_4.xyz;
    output.COLOR0.xyz = clamp(output.COLOR0.xyz, 0.0h, 1.0h);
    output.COLOR0.w = Globals._Color.w;
    output.COLOR0.w = clamp(output.COLOR0.w, 0.0h, 1.0h);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (8 bytes) on slot 0 {
  VectorHalf4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    sampler sampler_MainTex [[ sampler (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1.xyz = half3(u_xlat16_0.xyz * input.COLOR0.xyz);
    output.SV_Target0.w = half(u_xlat16_0.w * Globals._Color.w);
    output.SV_Target0.xyz = half3(u_xlat16_1.xyz + u_xlat16_1.xyz);
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
bool u_xlatb4;
float u_xlat15;
int u_xlati15;
float u_xlat16;
bool u_xlatb16;
float u_xlat17;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, in_NORMAL0.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat17 = unity_LightAtten[u_xlati_loop_1].z * u_xlat16 + 1.0;
        u_xlat17 = float(1.0) / u_xlat17;
        u_xlatb18 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb4 = unity_LightAtten[u_xlati_loop_1].w<u_xlat16;
        u_xlatb18 = u_xlatb18 && u_xlatb4;
        u_xlat16 = max(u_xlat16, 9.99999997e-007);
        u_xlat16 = inversesqrt(u_xlat16);
        u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
        u_xlat16 = u_xlat17 * 0.5;
        u_xlat16 = (u_xlatb18) ? 0.0 : u_xlat16;
        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
        u_xlat17 = max(u_xlat17, 0.0);
        u_xlat3.xyz = vec3(u_xlat17) * _Color.xyz;
        u_xlat3.xyz = u_xlat3.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
        u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    }
    vs_COLOR0.xyz = u_xlat2.xyz;
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
    vs_COLOR0.w = _Color.w;
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals264050885" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals264050885" (752 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixInvV at 576
  Matrix4x4 unity_MatrixV at 512
  Matrix4x4 unity_MatrixVP at 640
  Matrix4x4 unity_ObjectToWorld at 384
  Matrix4x4 unity_WorldToObject at 448
  Vector4 _Color at 704
  Vector4 _MainTex_ST at 736
  Vector4 unity_LightAtten[8] at 256
  Vector4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 128
  VectorInt4 unity_VertexLightParams at 720
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 594

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 198 346 497 518 519 577
                              Decorate 12 ArrayStride 16
                              Decorate 13 ArrayStride 16
                              Decorate 14 ArrayStride 16
                              Decorate 16 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 19 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              MemberDecorate 23 0 RelaxedPrecision
                              MemberDecorate 23 0 Offset 0
                              MemberDecorate 23 1 Offset 128
                              MemberDecorate 23 2 RelaxedPrecision
                              MemberDecorate 23 2 Offset 256
                              MemberDecorate 23 3 Offset 384
                              MemberDecorate 23 4 Offset 448
                              MemberDecorate 23 5 Offset 512
                              MemberDecorate 23 6 Offset 576
                              MemberDecorate 23 7 Offset 640
                              MemberDecorate 23 8 RelaxedPrecision
                              MemberDecorate 23 8 Offset 704
                              MemberDecorate 23 9 Offset 720
                              MemberDecorate 23 10 Offset 736
                              Decorate 23 Block
                              Decorate 25 DescriptorSet 1
                              Decorate 25 Binding 1
                              Decorate 198 Location 0
                              Decorate 346 Location 1
                              Decorate 377 RelaxedPrecision
                              Decorate 417 RelaxedPrecision
                              Decorate 434 RelaxedPrecision
                              Decorate 452 RelaxedPrecision
                              Decorate 461 RelaxedPrecision
                              Decorate 468 RelaxedPrecision
                              Decorate 469 RelaxedPrecision
                              Decorate 471 RelaxedPrecision
                              Decorate 472 RelaxedPrecision
                              Decorate 475 RelaxedPrecision
                              Decorate 476 RelaxedPrecision
                              Decorate 477 RelaxedPrecision
                              Decorate 478 RelaxedPrecision
                              Decorate 481 RelaxedPrecision
                              Decorate 482 RelaxedPrecision
                              Decorate 483 RelaxedPrecision
                              Decorate 484 RelaxedPrecision
                              Decorate 485 RelaxedPrecision
                              Decorate 486 RelaxedPrecision
                              Decorate 487 RelaxedPrecision
                              Decorate 488 RelaxedPrecision
                              Decorate 490 RelaxedPrecision
                              Decorate 491 RelaxedPrecision
                              Decorate 492 RelaxedPrecision
                              Decorate 493 RelaxedPrecision
                              Decorate 497 RelaxedPrecision
                              Decorate 497 Location 0
                              Decorate 498 RelaxedPrecision
                              Decorate 501 RelaxedPrecision
                              Decorate 502 RelaxedPrecision
                              Decorate 503 RelaxedPrecision
                              Decorate 504 RelaxedPrecision
                              Decorate 505 RelaxedPrecision
                              Decorate 509 RelaxedPrecision
                              Decorate 513 RelaxedPrecision
                              Decorate 514 RelaxedPrecision
                              Decorate 518 Location 1
                              Decorate 519 Location 2
                              MemberDecorate 575 0 BuiltIn Position
                              MemberDecorate 575 1 BuiltIn PointSize
                              MemberDecorate 575 2 BuiltIn ClipDistance
                              Decorate 575 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeInt 32 0
              11:     10(int) Constant 8
              12:             TypeArray 7(fvec4) 11
              13:             TypeArray 7(fvec4) 11
              14:             TypeArray 7(fvec4) 11
              15:     10(int) Constant 4
              16:             TypeArray 7(fvec4) 15
              17:             TypeArray 7(fvec4) 15
              18:             TypeArray 7(fvec4) 15
              19:             TypeArray 7(fvec4) 15
              20:             TypeArray 7(fvec4) 15
              21:             TypeInt 32 1
              22:             TypeVector 21(int) 4
              23:             TypeStruct 12 13 14 16 17 18 19 20 7(fvec4) 22(ivec4) 7(fvec4)
              24:             TypePointer Uniform 23(struct)
              25:     24(ptr) Variable Uniform
              26:     21(int) Constant 3
              27:     21(int) Constant 0
              28:             TypeVector 6(float) 3
              29:             TypePointer Uniform 7(fvec4)
              33:     21(int) Constant 5
              34:     21(int) Constant 1
              53:     21(int) Constant 2
              78:      8(ptr) Variable Private
             124:             TypePointer Private 28(fvec3)
             125:    124(ptr) Variable Private
             160:    124(ptr) Variable Private
             197:             TypePointer Input 28(fvec3)
             198:    197(ptr) Variable Input
             229:     21(int) Constant 4
             233:     21(int) Constant 6
             346:    197(ptr) Variable Input
             349:     10(int) Constant 0
             350:             TypePointer Private 6(float)
             355:     10(int) Constant 1
             360:     10(int) Constant 2
             362:    350(ptr) Variable Private
             377:    124(ptr) Variable Private
             378:    6(float) Constant 0
             382:             TypePointer Function 21(int)
             390:     21(int) Constant 9
             391:             TypePointer Uniform 21(int)
             394:             TypeBool
             409:    350(ptr) Variable Private
             413:    350(ptr) Variable Private
             415:             TypePointer Uniform 6(float)
             420:    6(float) Constant 1065353216
             424:             TypePointer Private 394(bool)
             425:    424(ptr) Variable Private
             427:     10(int) Constant 3
             431:    424(ptr) Variable Private
             441:    6(float) Constant 897988541
             450:    6(float) Constant 1056964608
             452:    350(ptr) Variable Private
             453:             TypePointer Function 6(float)
             461:    124(ptr) Variable Private
             473:     21(int) Constant 8
             489:   28(fvec3) ConstantComposite 420 420 420
             496:             TypePointer Output 7(fvec4)
             497:    496(ptr) Variable Output
             510:             TypePointer Output 6(float)
             516:             TypeVector 6(float) 2
             517:             TypePointer Output 516(fvec2)
             518:    517(ptr) Variable Output
             519:    197(ptr) Variable Input
             522:     21(int) Constant 10
             556:     21(int) Constant 7
             574:             TypeArray 6(float) 355
             575:             TypeStruct 7(fvec4) 6(float) 574
             576:             TypePointer Output 575(struct)
             577:    576(ptr) Variable Output
             591:             TypePointer Private 21(int)
             592:    591(ptr) Variable Private
             593:    424(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
             383:    382(ptr) Variable Function
             454:    453(ptr) Variable Function
              30:     29(ptr) AccessChain 25 26 27
              31:    7(fvec4) Load 30
              32:   28(fvec3) VectorShuffle 31 31 1 1 1
              35:     29(ptr) AccessChain 25 33 34
              36:    7(fvec4) Load 35
              37:   28(fvec3) VectorShuffle 36 36 0 1 2
              38:   28(fvec3) FMul 32 37
              39:    7(fvec4) Load 9
              40:    7(fvec4) VectorShuffle 39 38 4 5 6 3
                              Store 9 40
              41:     29(ptr) AccessChain 25 33 27
              42:    7(fvec4) Load 41
              43:   28(fvec3) VectorShuffle 42 42 0 1 2
              44:     29(ptr) AccessChain 25 26 27
              45:    7(fvec4) Load 44
              46:   28(fvec3) VectorShuffle 45 45 0 0 0
              47:   28(fvec3) FMul 43 46
              48:    7(fvec4) Load 9
              49:   28(fvec3) VectorShuffle 48 48 0 1 2
              50:   28(fvec3) FAdd 47 49
              51:    7(fvec4) Load 9
              52:    7(fvec4) VectorShuffle 51 50 4 5 6 3
                              Store 9 52
              54:     29(ptr) AccessChain 25 33 53
              55:    7(fvec4) Load 54
              56:   28(fvec3) VectorShuffle 55 55 0 1 2
              57:     29(ptr) AccessChain 25 26 27
              58:    7(fvec4) Load 57
              59:   28(fvec3) VectorShuffle 58 58 2 2 2
              60:   28(fvec3) FMul 56 59
              61:    7(fvec4) Load 9
              62:   28(fvec3) VectorShuffle 61 61 0 1 2
              63:   28(fvec3) FAdd 60 62
              64:    7(fvec4) Load 9
              65:    7(fvec4) VectorShuffle 64 63 4 5 6 3
                              Store 9 65
              66:     29(ptr) AccessChain 25 33 26
              67:    7(fvec4) Load 66
              68:   28(fvec3) VectorShuffle 67 67 0 1 2
              69:     29(ptr) AccessChain 25 26 27
              70:    7(fvec4) Load 69
              71:   28(fvec3) VectorShuffle 70 70 3 3 3
              72:   28(fvec3) FMul 68 71
              73:    7(fvec4) Load 9
              74:   28(fvec3) VectorShuffle 73 73 0 1 2
              75:   28(fvec3) FAdd 72 74
              76:    7(fvec4) Load 9
              77:    7(fvec4) VectorShuffle 76 75 4 5 6 3
                              Store 9 77
              79:     29(ptr) AccessChain 25 26 34
              80:    7(fvec4) Load 79
              81:   28(fvec3) VectorShuffle 80 80 1 1 1
              82:     29(ptr) AccessChain 25 33 34
              83:    7(fvec4) Load 82
              84:   28(fvec3) VectorShuffle 83 83 0 1 2
              85:   28(fvec3) FMul 81 84
              86:    7(fvec4) Load 78
              87:    7(fvec4) VectorShuffle 86 85 4 5 6 3
                              Store 78 87
              88:     29(ptr) AccessChain 25 33 27
              89:    7(fvec4) Load 88
              90:   28(fvec3) VectorShuffle 89 89 0 1 2
              91:     29(ptr) AccessChain 25 26 34
              92:    7(fvec4) Load 91
              93:   28(fvec3) VectorShuffle 92 92 0 0 0
              94:   28(fvec3) FMul 90 93
              95:    7(fvec4) Load 78
              96:   28(fvec3) VectorShuffle 95 95 0 1 2
              97:   28(fvec3) FAdd 94 96
              98:    7(fvec4) Load 78
              99:    7(fvec4) VectorShuffle 98 97 4 5 6 3
                              Store 78 99
             100:     29(ptr) AccessChain 25 33 53
             101:    7(fvec4) Load 100
             102:   28(fvec3) VectorShuffle 101 101 0 1 2
             103:     29(ptr) AccessChain 25 26 34
             104:    7(fvec4) Load 103
             105:   28(fvec3) VectorShuffle 104 104 2 2 2
             106:   28(fvec3) FMul 102 105
             107:    7(fvec4) Load 78
             108:   28(fvec3) VectorShuffle 107 107 0 1 2
             109:   28(fvec3) FAdd 106 108
             110:    7(fvec4) Load 78
             111:    7(fvec4) VectorShuffle 110 109 4 5 6 3
                              Store 78 111
             112:     29(ptr) AccessChain 25 33 26
             113:    7(fvec4) Load 112
             114:   28(fvec3) VectorShuffle 113 113 0 1 2
             115:     29(ptr) AccessChain 25 26 34
             116:    7(fvec4) Load 115
             117:   28(fvec3) VectorShuffle 116 116 3 3 3
             118:   28(fvec3) FMul 114 117
             119:    7(fvec4) Load 78
             120:   28(fvec3) VectorShuffle 119 119 0 1 2
             121:   28(fvec3) FAdd 118 120
             122:    7(fvec4) Load 78
             123:    7(fvec4) VectorShuffle 122 121 4 5 6 3
                              Store 78 123
             126:     29(ptr) AccessChain 25 26 53
             127:    7(fvec4) Load 126
             128:   28(fvec3) VectorShuffle 127 127 1 1 1
             129:     29(ptr) AccessChain 25 33 34
             130:    7(fvec4) Load 129
             131:   28(fvec3) VectorShuffle 130 130 0 1 2
             132:   28(fvec3) FMul 128 131
                              Store 125 132
             133:     29(ptr) AccessChain 25 33 27
             134:    7(fvec4) Load 133
             135:   28(fvec3) VectorShuffle 134 134 0 1 2
             136:     29(ptr) AccessChain 25 26 53
             137:    7(fvec4) Load 136
             138:   28(fvec3) VectorShuffle 137 137 0 0 0
             139:   28(fvec3) FMul 135 138
             140:   28(fvec3) Load 125
             141:   28(fvec3) FAdd 139 140
                              Store 125 141
             142:     29(ptr) AccessChain 25 33 53
             143:    7(fvec4) Load 142
             144:   28(fvec3) VectorShuffle 143 143 0 1 2
             145:     29(ptr) AccessChain 25 26 53
             146:    7(fvec4) Load 145
             147:   28(fvec3) VectorShuffle 146 146 2 2 2
             148:   28(fvec3) FMul 144 147
             149:   28(fvec3) Load 125
             150:   28(fvec3) FAdd 148 149
                              Store 125 150
             151:     29(ptr) AccessChain 25 33 26
             152:    7(fvec4) Load 151
             153:   28(fvec3) VectorShuffle 152 152 0 1 2
             154:     29(ptr) AccessChain 25 26 53
             155:    7(fvec4) Load 154
             156:   28(fvec3) VectorShuffle 155 155 3 3 3
             157:   28(fvec3) FMul 153 156
             158:   28(fvec3) Load 125
             159:   28(fvec3) FAdd 157 158
                              Store 125 159
             161:     29(ptr) AccessChain 25 26 26
             162:    7(fvec4) Load 161
             163:   28(fvec3) VectorShuffle 162 162 1 1 1
             164:     29(ptr) AccessChain 25 33 34
             165:    7(fvec4) Load 164
             166:   28(fvec3) VectorShuffle 165 165 0 1 2
             167:   28(fvec3) FMul 163 166
                              Store 160 167
             168:     29(ptr) AccessChain 25 33 27
             169:    7(fvec4) Load 168
             170:   28(fvec3) VectorShuffle 169 169 0 1 2
             171:     29(ptr) AccessChain 25 26 26
             172:    7(fvec4) Load 171
             173:   28(fvec3) VectorShuffle 172 172 0 0 0
             174:   28(fvec3) FMul 170 173
             175:   28(fvec3) Load 160
             176:   28(fvec3) FAdd 174 175
                              Store 160 176
             177:     29(ptr) AccessChain 25 33 53
             178:    7(fvec4) Load 177
             179:   28(fvec3) VectorShuffle 178 178 0 1 2
             180:     29(ptr) AccessChain 25 26 26
             181:    7(fvec4) Load 180
             182:   28(fvec3) VectorShuffle 181 181 2 2 2
             183:   28(fvec3) FMul 179 182
             184:   28(fvec3) Load 160
             185:   28(fvec3) FAdd 183 184
                              Store 160 185
             186:     29(ptr) AccessChain 25 33 26
             187:    7(fvec4) Load 186
             188:   28(fvec3) VectorShuffle 187 187 0 1 2
             189:     29(ptr) AccessChain 25 26 26
             190:    7(fvec4) Load 189
             191:   28(fvec3) VectorShuffle 190 190 3 3 3
             192:   28(fvec3) FMul 188 191
             193:   28(fvec3) Load 160
             194:   28(fvec3) FAdd 192 193
                              Store 160 194
             195:    7(fvec4) Load 78
             196:   28(fvec3) VectorShuffle 195 195 0 1 2
             199:   28(fvec3) Load 198
             200:   28(fvec3) VectorShuffle 199 199 1 1 1
             201:   28(fvec3) FMul 196 200
             202:    7(fvec4) Load 78
             203:    7(fvec4) VectorShuffle 202 201 4 5 6 3
                              Store 78 203
             204:    7(fvec4) Load 9
             205:   28(fvec3) VectorShuffle 204 204 0 1 2
             206:   28(fvec3) Load 198
             207:   28(fvec3) VectorShuffle 206 206 0 0 0
             208:   28(fvec3) FMul 205 207
             209:    7(fvec4) Load 78
             210:   28(fvec3) VectorShuffle 209 209 0 1 2
             211:   28(fvec3) FAdd 208 210
             212:    7(fvec4) Load 9
             213:    7(fvec4) VectorShuffle 212 211 4 5 6 3
                              Store 9 213
             214:   28(fvec3) Load 125
             215:   28(fvec3) Load 198
             216:   28(fvec3) VectorShuffle 215 215 2 2 2
             217:   28(fvec3) FMul 214 216
             218:    7(fvec4) Load 9
             219:   28(fvec3) VectorShuffle 218 218 0 1 2
             220:   28(fvec3) FAdd 217 219
             221:    7(fvec4) Load 9
             222:    7(fvec4) VectorShuffle 221 220 4 5 6 3
                              Store 9 222
             223:   28(fvec3) Load 160
             224:    7(fvec4) Load 9
             225:   28(fvec3) VectorShuffle 224 224 0 1 2
             226:   28(fvec3) FAdd 223 225
             227:    7(fvec4) Load 9
             228:    7(fvec4) VectorShuffle 227 226 4 5 6 3
                              Store 9 228
             230:     29(ptr) AccessChain 25 229 34
             231:    7(fvec4) Load 230
             232:   28(fvec3) VectorShuffle 231 231 0 1 2
             234:     29(ptr) AccessChain 25 233 27
             235:    7(fvec4) Load 234
             236:   28(fvec3) VectorShuffle 235 235 1 1 1
             237:   28(fvec3) FMul 232 236
             238:    7(fvec4) Load 78
             239:    7(fvec4) VectorShuffle 238 237 4 5 6 3
                              Store 78 239
             240:     29(ptr) AccessChain 25 229 27
             241:    7(fvec4) Load 240
             242:   28(fvec3) VectorShuffle 241 241 0 1 2
             243:     29(ptr) AccessChain 25 233 27
             244:    7(fvec4) Load 243
             245:   28(fvec3) VectorShuffle 244 244 0 0 0
             246:   28(fvec3) FMul 242 245
             247:    7(fvec4) Load 78
             248:   28(fvec3) VectorShuffle 247 247 0 1 2
             249:   28(fvec3) FAdd 246 248
             250:    7(fvec4) Load 78
             251:    7(fvec4) VectorShuffle 250 249 4 5 6 3
                              Store 78 251
             252:     29(ptr) AccessChain 25 229 53
             253:    7(fvec4) Load 252
             254:   28(fvec3) VectorShuffle 253 253 0 1 2
             255:     29(ptr) AccessChain 25 233 27
             256:    7(fvec4) Load 255
             257:   28(fvec3) VectorShuffle 256 256 2 2 2
             258:   28(fvec3) FMul 254 257
             259:    7(fvec4) Load 78
             260:   28(fvec3) VectorShuffle 259 259 0 1 2
             261:   28(fvec3) FAdd 258 260
             262:    7(fvec4) Load 78
             263:    7(fvec4) VectorShuffle 262 261 4 5 6 3
                              Store 78 263
             264:     29(ptr) AccessChain 25 229 26
             265:    7(fvec4) Load 264
             266:   28(fvec3) VectorShuffle 265 265 0 1 2
             267:     29(ptr) AccessChain 25 233 27
             268:    7(fvec4) Load 267
             269:   28(fvec3) VectorShuffle 268 268 3 3 3
             270:   28(fvec3) FMul 266 269
             271:    7(fvec4) Load 78
             272:   28(fvec3) VectorShuffle 271 271 0 1 2
             273:   28(fvec3) FAdd 270 272
             274:    7(fvec4) Load 78
             275:    7(fvec4) VectorShuffle 274 273 4 5 6 3
                              Store 78 275
             276:     29(ptr) AccessChain 25 229 34
             277:    7(fvec4) Load 276
             278:   28(fvec3) VectorShuffle 277 277 0 1 2
             279:     29(ptr) AccessChain 25 233 34
             280:    7(fvec4) Load 279
             281:   28(fvec3) VectorShuffle 280 280 1 1 1
             282:   28(fvec3) FMul 278 281
                              Store 125 282
             283:     29(ptr) AccessChain 25 229 27
             284:    7(fvec4) Load 283
             285:   28(fvec3) VectorShuffle 284 284 0 1 2
             286:     29(ptr) AccessChain 25 233 34
             287:    7(fvec4) Load 286
             288:   28(fvec3) VectorShuffle 287 287 0 0 0
             289:   28(fvec3) FMul 285 288
             290:   28(fvec3) Load 125
             291:   28(fvec3) FAdd 289 290
                              Store 125 291
             292:     29(ptr) AccessChain 25 229 53
             293:    7(fvec4) Load 292
             294:   28(fvec3) VectorShuffle 293 293 0 1 2
             295:     29(ptr) AccessChain 25 233 34
             296:    7(fvec4) Load 295
             297:   28(fvec3) VectorShuffle 296 296 2 2 2
             298:   28(fvec3) FMul 294 297
             299:   28(fvec3) Load 125
             300:   28(fvec3) FAdd 298 299
                              Store 125 300
             301:     29(ptr) AccessChain 25 229 26
             302:    7(fvec4) Load 301
             303:   28(fvec3) VectorShuffle 302 302 0 1 2
             304:     29(ptr) AccessChain 25 233 34
             305:    7(fvec4) Load 304
             306:   28(fvec3) VectorShuffle 305 305 3 3 3
             307:   28(fvec3) FMul 303 306
             308:   28(fvec3) Load 125
             309:   28(fvec3) FAdd 307 308
                              Store 125 309
             310:     29(ptr) AccessChain 25 229 34
             311:    7(fvec4) Load 310
             312:   28(fvec3) VectorShuffle 311 311 0 1 2
             313:     29(ptr) AccessChain 25 233 53
             314:    7(fvec4) Load 313
             315:   28(fvec3) VectorShuffle 314 314 1 1 1
             316:   28(fvec3) FMul 312 315
                              Store 160 316
             317:     29(ptr) AccessChain 25 229 27
             318:    7(fvec4) Load 317
             319:   28(fvec3) VectorShuffle 318 318 0 1 2
             320:     29(ptr) AccessChain 25 233 53
             321:    7(fvec4) Load 320
             322:   28(fvec3) VectorShuffle 321 321 0 0 0
             323:   28(fvec3) FMul 319 322
             324:   28(fvec3) Load 160
             325:   28(fvec3) FAdd 323 324
                              Store 160 325
             326:     29(ptr) AccessChain 25 229 53
             327:    7(fvec4) Load 326
             328:   28(fvec3) VectorShuffle 327 327 0 1 2
             329:     29(ptr) AccessChain 25 233 53
             330:    7(fvec4) Load 329
             331:   28(fvec3) VectorShuffle 330 330 2 2 2
             332:   28(fvec3) FMul 328 331
             333:   28(fvec3) Load 160
             334:   28(fvec3) FAdd 332 333
                              Store 160 334
             335:     29(ptr) AccessChain 25 229 26
             336:    7(fvec4) Load 335
             337:   28(fvec3) VectorShuffle 336 336 0 1 2
             338:     29(ptr) AccessChain 25 233 53
             339:    7(fvec4) Load 338
             340:   28(fvec3) VectorShuffle 339 339 3 3 3
             341:   28(fvec3) FMul 337 340
             342:   28(fvec3) Load 160
             343:   28(fvec3) FAdd 341 342
                              Store 160 343
             344:    7(fvec4) Load 78
             345:   28(fvec3) VectorShuffle 344 344 0 1 2
             347:   28(fvec3) Load 346
             348:    6(float) Dot 345 347
             351:    350(ptr) AccessChain 78 349
                              Store 351 348
             352:   28(fvec3) Load 125
             353:   28(fvec3) Load 346
             354:    6(float) Dot 352 353
             356:    350(ptr) AccessChain 78 355
                              Store 356 354
             357:   28(fvec3) Load 160
             358:   28(fvec3) Load 346
             359:    6(float) Dot 357 358
             361:    350(ptr) AccessChain 78 360
                              Store 361 359
             363:    7(fvec4) Load 78
             364:   28(fvec3) VectorShuffle 363 363 0 1 2
             365:    7(fvec4) Load 78
             366:   28(fvec3) VectorShuffle 365 365 0 1 2
             367:    6(float) Dot 364 366
                              Store 362 367
             368:    6(float) Load 362
             369:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 368
                              Store 362 369
             370:    6(float) Load 362
             371:   28(fvec3) CompositeConstruct 370 370 370
             372:    7(fvec4) Load 78
             373:   28(fvec3) VectorShuffle 372 372 0 1 2
             374:   28(fvec3) FMul 371 373
             375:    7(fvec4) Load 78
             376:    7(fvec4) VectorShuffle 375 374 4 5 6 3
                              Store 78 376
             379:    350(ptr) AccessChain 377 349
                              Store 379 378
             380:    350(ptr) AccessChain 377 355
                              Store 380 378
             381:    350(ptr) AccessChain 377 360
                              Store 381 378
                              Store 383 27
                              Branch 384
             384:             Label
                              LoopMerge 386 387 None
                              Branch 388
             388:             Label
             389:     21(int) Load 383
             392:    391(ptr) AccessChain 25 390 349
             393:     21(int) Load 392
             395:   394(bool) SLessThan 389 393
                              BranchConditional 395 385 386
             385:               Label
             396:    7(fvec4)   Load 9
             397:   28(fvec3)   VectorShuffle 396 396 0 1 2
             398:   28(fvec3)   FNegate 397
             399:     21(int)   Load 383
             400:     29(ptr)   AccessChain 25 34 399
             401:    7(fvec4)   Load 400
             402:   28(fvec3)   VectorShuffle 401 401 3 3 3
             403:   28(fvec3)   FMul 398 402
             404:     21(int)   Load 383
             405:     29(ptr)   AccessChain 25 34 404
             406:    7(fvec4)   Load 405
             407:   28(fvec3)   VectorShuffle 406 406 0 1 2
             408:   28(fvec3)   FAdd 403 407
                                Store 125 408
             410:   28(fvec3)   Load 125
             411:   28(fvec3)   Load 125
             412:    6(float)   Dot 410 411
                                Store 409 412
             414:     21(int)   Load 383
             416:    415(ptr)   AccessChain 25 53 414 360
             417:    6(float)   Load 416
             418:    6(float)   Load 409
             419:    6(float)   FMul 417 418
             421:    6(float)   FAdd 419 420
                                Store 413 421
             422:    6(float)   Load 413
             423:    6(float)   FDiv 420 422
                                Store 413 423
             426:     21(int)   Load 383
             428:    415(ptr)   AccessChain 25 34 426 427
             429:    6(float)   Load 428
             430:   394(bool)   FOrdNotEqual 378 429
                                Store 425 430
             432:     21(int)   Load 383
             433:    415(ptr)   AccessChain 25 53 432 427
             434:    6(float)   Load 433
             435:    6(float)   Load 409
             436:   394(bool)   FOrdLessThan 434 435
                                Store 431 436
             437:   394(bool)   Load 431
             438:   394(bool)   Load 425
             439:   394(bool)   LogicalAnd 437 438
                                Store 425 439
             440:    6(float)   Load 409
             442:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 440 441
                                Store 409 442
             443:    6(float)   Load 409
             444:    6(float)   ExtInst 1(GLSL.std.450) 32(InverseSqrt) 443
                                Store 409 444
             445:    6(float)   Load 409
             446:   28(fvec3)   CompositeConstruct 445 445 445
             447:   28(fvec3)   Load 125
             448:   28(fvec3)   FMul 446 447
                                Store 125 448
             449:    6(float)   Load 413
             451:    6(float)   FMul 449 450
                                Store 409 451
             455:   394(bool)   Load 425
                                SelectionMerge 457 None
                                BranchConditional 455 456 458
             456:                 Label
                                  Store 454 378
                                  Branch 457
             458:                 Label
             459:    6(float)     Load 409
                                  Store 454 459
                                  Branch 457
             457:               Label
             460:    6(float)   Load 454
                                Store 452 460
             462:    7(fvec4)   Load 78
             463:   28(fvec3)   VectorShuffle 462 462 0 1 2
             464:   28(fvec3)   Load 125
             465:    6(float)   Dot 463 464
             466:    350(ptr)   AccessChain 461 349
                                Store 466 465
             467:    350(ptr)   AccessChain 461 349
             468:    6(float)   Load 467
             469:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 468 378
             470:    350(ptr)   AccessChain 461 349
                                Store 470 469
             471:   28(fvec3)   Load 461
             472:   28(fvec3)   VectorShuffle 471 471 0 0 0
             474:     29(ptr)   AccessChain 25 473
             475:    7(fvec4)   Load 474
             476:   28(fvec3)   VectorShuffle 475 475 0 1 2
             477:   28(fvec3)   FMul 472 476
                                Store 461 477
             478:   28(fvec3)   Load 461
             479:     21(int)   Load 383
             480:     29(ptr)   AccessChain 25 27 479
             481:    7(fvec4)   Load 480
             482:   28(fvec3)   VectorShuffle 481 481 0 1 2
             483:   28(fvec3)   FMul 478 482
                                Store 461 483
             484:    6(float)   Load 452
             485:   28(fvec3)   CompositeConstruct 484 484 484
             486:   28(fvec3)   Load 461
             487:   28(fvec3)   FMul 485 486
                                Store 461 487
             488:   28(fvec3)   Load 461
             490:   28(fvec3)   ExtInst 1(GLSL.std.450) 37(FMin) 488 489
                                Store 461 490
             491:   28(fvec3)   Load 377
             492:   28(fvec3)   Load 461
             493:   28(fvec3)   FAdd 491 492
                                Store 377 493
                                Branch 387
             387:               Label
             494:     21(int)   Load 383
             495:     21(int)   IAdd 494 34
                                Store 383 495
                                Branch 384
             386:             Label
             498:   28(fvec3) Load 377
             499:    7(fvec4) Load 497
             500:    7(fvec4) VectorShuffle 499 498 4 5 6 3
                              Store 497 500
             501:    7(fvec4) Load 497
             502:   28(fvec3) VectorShuffle 501 501 0 1 2
             503:   28(fvec3) CompositeConstruct 378 378 378
             504:   28(fvec3) CompositeConstruct 420 420 420
             505:   28(fvec3) ExtInst 1(GLSL.std.450) 43(FClamp) 502 503 504
             506:    7(fvec4) Load 497
             507:    7(fvec4) VectorShuffle 506 505 4 5 6 3
                              Store 497 507
             508:    415(ptr) AccessChain 25 473 427
             509:    6(float) Load 508
             511:    510(ptr) AccessChain 497 427
                              Store 511 509
             512:    510(ptr) AccessChain 497 427
             513:    6(float) Load 512
             514:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 513 378 420
             515:    510(ptr) AccessChain 497 427
                              Store 515 514
             520:   28(fvec3) Load 519
             521:  516(fvec2) VectorShuffle 520 520 0 1
             523:     29(ptr) AccessChain 25 522
             524:    7(fvec4) Load 523
             525:  516(fvec2) VectorShuffle 524 524 0 1
             526:  516(fvec2) FMul 521 525
             527:     29(ptr) AccessChain 25 522
             528:    7(fvec4) Load 527
             529:  516(fvec2) VectorShuffle 528 528 2 3
             530:  516(fvec2) FAdd 526 529
                              Store 518 530
             531:   28(fvec3) Load 198
             532:    7(fvec4) VectorShuffle 531 531 1 1 1 1
             533:     29(ptr) AccessChain 25 26 34
             534:    7(fvec4) Load 533
             535:    7(fvec4) FMul 532 534
                              Store 9 535
             536:     29(ptr) AccessChain 25 26 27
             537:    7(fvec4) Load 536
             538:   28(fvec3) Load 198
             539:    7(fvec4) VectorShuffle 538 538 0 0 0 0
             540:    7(fvec4) FMul 537 539
             541:    7(fvec4) Load 9
             542:    7(fvec4) FAdd 540 541
                              Store 9 542
             543:     29(ptr) AccessChain 25 26 53
             544:    7(fvec4) Load 543
             545:   28(fvec3) Load 198
             546:    7(fvec4) VectorShuffle 545 545 2 2 2 2
             547:    7(fvec4) FMul 544 546
             548:    7(fvec4) Load 9
             549:    7(fvec4) FAdd 547 548
                              Store 9 549
             550:    7(fvec4) Load 9
             551:     29(ptr) AccessChain 25 26 26
             552:    7(fvec4) Load 551
             553:    7(fvec4) FAdd 550 552
                              Store 9 553
             554:    7(fvec4) Load 9
             555:    7(fvec4) VectorShuffle 554 554 1 1 1 1
             557:     29(ptr) AccessChain 25 556 34
             558:    7(fvec4) Load 557
             559:    7(fvec4) FMul 555 558
                              Store 78 559
             560:     29(ptr) AccessChain 25 556 27
             561:    7(fvec4) Load 560
             562:    7(fvec4) Load 9
             563:    7(fvec4) VectorShuffle 562 562 0 0 0 0
             564:    7(fvec4) FMul 561 563
             565:    7(fvec4) Load 78
             566:    7(fvec4) FAdd 564 565
                              Store 78 566
             567:     29(ptr) AccessChain 25 556 53
             568:    7(fvec4) Load 567
             569:    7(fvec4) Load 9
             570:    7(fvec4) VectorShuffle 569 569 2 2 2 2
             571:    7(fvec4) FMul 568 570
             572:    7(fvec4) Load 78
             573:    7(fvec4) FAdd 571 572
                              Store 78 573
             578:     29(ptr) AccessChain 25 556 26
             579:    7(fvec4) Load 578
             580:    7(fvec4) Load 9
             581:    7(fvec4) VectorShuffle 580 580 3 3 3 3
             582:    7(fvec4) FMul 579 581
             583:    7(fvec4) Load 78
             584:    7(fvec4) FAdd 582 583
             585:    496(ptr) AccessChain 577 27
                              Store 585 584
             586:    510(ptr) AccessChain 577 27 355
             587:    6(float) Load 586
             588:    6(float) FNegate 587
             589:    510(ptr) AccessChain 577 27 355
                              Store 589 588
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 54

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 26 31
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 1
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 24 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              Decorate 26 Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31 RelaxedPrecision
                              Decorate 31 Location 0
                              Decorate 36 RelaxedPrecision
                              MemberDecorate 37 0 RelaxedPrecision
                              MemberDecorate 37 0 Offset 0
                              Decorate 37 Block
                              Decorate 39 DescriptorSet 1
                              Decorate 39 Binding 0
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:             TypeVector 6(float) 3
              21:             TypePointer Private 20(fvec3)
              22:     21(ptr) Variable Private
              25:             TypePointer Input 7(fvec4)
              26:     25(ptr) Variable Input
              30:             TypePointer Output 7(fvec4)
              31:     30(ptr) Variable Output
              32:             TypeInt 32 0
              33:     32(int) Constant 3
              34:             TypePointer Private 6(float)
              37:             TypeStruct 7(fvec4)
              38:             TypePointer Uniform 37(struct)
              39:     38(ptr) Variable Uniform
              40:             TypeInt 32 1
              41:     40(int) Constant 0
              42:             TypePointer Uniform 6(float)
              46:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              23:    7(fvec4) Load 9
              24:   20(fvec3) VectorShuffle 23 23 0 1 2
              27:    7(fvec4) Load 26
              28:   20(fvec3) VectorShuffle 27 27 0 1 2
              29:   20(fvec3) FMul 24 28
                              Store 22 29
              35:     34(ptr) AccessChain 9 33
              36:    6(float) Load 35
              43:     42(ptr) AccessChain 39 41 33
              44:    6(float) Load 43
              45:    6(float) FMul 36 44
              47:     46(ptr) AccessChain 31 33
                              Store 47 45
              48:   20(fvec3) Load 22
              49:   20(fvec3) Load 22
              50:   20(fvec3) FAdd 48 49
              51:    7(fvec4) Load 31
              52:    7(fvec4) VectorShuffle 51 50 4 5 6 3
                              Store 31 52
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

-- Vertex shader for "d3d9":
// Stats: 82 math, 5 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Matrix4x4 unity_MatrixInvV at 36
Matrix4x3 unity_MatrixV at 47
Matrix4x4 unity_MatrixVP at 40
Matrix4x4 unity_ObjectToWorld at 32
Matrix4x3 unity_WorldToObject at 44
Vector4 _Color at 50
Vector4 _MainTex_ST at 51
Vector4 unity_LightAtten[8] at 16
Vector4 unity_LightColor[8] at 0
Vector4 unity_LightPosition[8] at 8
Vector4 unity_SpotDirection[8] at 24
VectorInt4 unity_VertexLightParams at 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   float4 _MainTex_ST;
//   float4 unity_LightAtten[8];
//   float4 unity_LightColor[8];
//   float4 unity_LightPosition[8];
//   row_major float4x4 unity_MatrixInvV;
//   row_major float4x4 unity_MatrixV;
//   row_major float4x4 unity_MatrixVP;
//   row_major float4x4 unity_ObjectToWorld;
//   float4 unity_SpotDirection[8];
//   int4 unity_VertexLightParams;
//   row_major float4x4 unity_WorldToObject;
//
//
// Registers:
//
//   Name                    Reg   Size
//   ----------------------- ----- ----
//   unity_VertexLightParams i0       1
//   unity_LightColor        c0       8
//   unity_LightPosition     c8       8
//   unity_LightAtten        c16      8
//   unity_SpotDirection     c24      8
//   unity_ObjectToWorld     c32      4
//   unity_MatrixInvV        c36      4
//   unity_MatrixVP          c40      4
//   unity_WorldToObject     c44      3
//   unity_MatrixV           c47      3
//   _Color                  c50      1
//   _MainTex_ST             c51      1
//

    vs_2_0
    def c52, 1, 0, 9.99999997e-007, 0.5
    dcl_position v0
    dcl_normal v1
    dcl_texcoord v2
    mad oT0.xy, v2, c51, c51.zwzw
    mov r0, c45
    mul r1.xyz, r0.y, c37
    mad r1.xyz, r0.x, c36, r1
    mad r0.xyz, r0.z, c38, r1
    mad r0.xyz, r0.w, c39, r0
    mul r0.xyz, r0, v1.y
    mov r1, c44
    mul r2.xyz, r1.y, c37
    mad r2.xyz, r1.x, c36, r2
    mad r1.xyz, r1.z, c38, r2
    mad r1.xyz, r1.w, c39, r1
    mad r0.xyz, r1, v1.x, r0
    mov r1, c46
    mul r2.xyz, r1.y, c37
    mad r2.xyz, r1.x, c36, r2
    mad r1.xyz, r1.z, c38, r2
    mad r1.xyz, r1.w, c39, r1
    mad r0.xyz, r1, v1.z, r0
    nrm r1.xyz, r0
    mov r0, c47
    mul r2, r0.y, c33
    mad r2, r0.x, c32, r2
    mad r2, r0.z, c34, r2
    mad r0, r0.w, c35, r2
    mad r2, v0.xyzx, c52.xxxy, c52.yyyx
    dp4 r0.x, r0, r2
    mov r3, c48
    mul r4, r3.y, c33
    mad r4, r3.x, c32, r4
    mad r4, r3.z, c34, r4
    mad r3, r3.w, c35, r4
    dp4 r0.y, r3, r2
    mov r3, c49
    mul r4, r3.y, c33
    mad r4, r3.x, c32, r4
    mad r4, r3.z, c34, r4
    mad r3, r3.w, c35, r4
    dp4 r0.z, r3, r2
    mov r3.xyz, c52.y
    loop aL, i0
      mad r4.xyz, r0, -c8[aL].w, c8[aL]
      dp3 r0.w, r4, r4
      max r1.w, r0.w, c52.z
      rsq r1.w, r1.w
      mul r4.xyz, r1.w, r4
      dp3 r1.w, r1, r4
      mul r3.w, c8[aL].w, c8[aL].w
      slt r3.w, -r3.w, r3.w
      slt r4.w, c16[aL].w, r0.w
      mul r3.w, r3.w, r4.w
      mul r0.w, r0.w, c16[aL].z
      add r0.w, r0.w, c52.x
      rcp r0.w, r0.w
      mad r0.w, r3.w, -r0.w, r0.w
      dp3 r3.w, r4, c24[aL]
      max r3.w, r3.w, c52.y
      add r3.w, r3.w, -c16[aL].x
      mul r3.w, r3.w, c16[aL].y
      max r3.w, r3.w, c52.y
      min r3.w, r3.w, c52.x
      mul r0.w, r0.w, r3.w
      mul r0.w, r0.w, c52.w
      max r1.w, r1.w, c52.y
      mul r4.xyz, r1.w, c50
      mul r4.xyz, r4, c0[aL]
      mul r4.xyz, r0.w, r4
      min r4.xyz, r4, c52.x
      add r3.xyz, r3, r4
    endloop
    dp4 r0.w, c35, r2
    dp4 r0.x, c32, r2
    dp4 r0.y, c33, r2
    dp4 r0.z, c34, r2
    dp4 r5.w, c43, r0
    max r1.xyz, r3, c52.y
    mov r2.y, c52.y
    max r1.w, r2.y, c50.w
    min oD0, r1, c52.x
    dp4 r5.x, c40, r0
    dp4 r5.y, c41, r0
    dp4 r5.z, c42, r0
    mad oPos.xy, r5.w, c255, r5
    mov oPos.zw, r5

// approximately 89 instruction slots used


-- Fragment shader for "d3d9":
// Stats: 4 math, 1 textures
Vector4 _Color at 0

Set 2D Texture "_MainTex" to slot 0

Shader Disassembly:
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
// Parameters:
//
//   float4 _Color;
//   sampler2D _MainTex;
//
//
// Registers:
//
//   Name         Reg   Size
//   ------------ ----- ----
//   _Color       c0       1
//   _MainTex     s0       1
//

    ps_2_0
    dcl v0.xyz
    dcl t0.xy
    dcl_2d s0
    texld_pp r0, t0, s0
    mul_pp r0.xyz, r0, v0
    mul_pp r1.w, r0.w, c0.w
    add_pp r1.xyz, r0, r0
    mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)


-- Vertex shader for "d3d11":
// Stats: 72 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
  Vector4 unity_LightAtten[8] at 352
  Vector4 unity_SpotDirection[8] at 480
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[38], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 5
   0: mul r0.xyz, cb2[0].yyyy, cb3[10].xyzx
   1: mad r0.xyz, cb3[9].xyzx, cb2[0].xxxx, r0.xyzx
   2: mad r0.xyz, cb3[11].xyzx, cb2[0].zzzz, r0.xyzx
   3: mad r0.xyz, cb3[12].xyzx, cb2[0].wwww, r0.xyzx
   4: mul r1.xyz, cb2[1].yyyy, cb3[10].xyzx
   5: mad r1.xyz, cb3[9].xyzx, cb2[1].xxxx, r1.xyzx
   6: mad r1.xyz, cb3[11].xyzx, cb2[1].zzzz, r1.xyzx
   7: mad r1.xyz, cb3[12].xyzx, cb2[1].wwww, r1.xyzx
   8: mul r2.xyz, cb2[2].yyyy, cb3[10].xyzx
   9: mad r2.xyz, cb3[9].xyzx, cb2[2].xxxx, r2.xyzx
  10: mad r2.xyz, cb3[11].xyzx, cb2[2].zzzz, r2.xyzx
  11: mad r2.xyz, cb3[12].xyzx, cb2[2].wwww, r2.xyzx
  12: mul r3.xyz, cb2[3].yyyy, cb3[10].xyzx
  13: mad r3.xyz, cb3[9].xyzx, cb2[3].xxxx, r3.xyzx
  14: mad r3.xyz, cb3[11].xyzx, cb2[3].zzzz, r3.xyzx
  15: mad r3.xyz, cb3[12].xyzx, cb2[3].wwww, r3.xyzx
  16: mul r1.xyz, r1.xyzx, v0.yyyy
  17: mad r0.xyz, r0.xyzx, v0.xxxx, r1.xyzx
  18: mad r0.xyz, r2.xyzx, v0.zzzz, r0.xyzx
  19: add r0.xyz, r3.xyzx, r0.xyzx
  20: mul r1.xyz, cb2[5].xyzx, cb3[13].yyyy
  21: mad r1.xyz, cb2[4].xyzx, cb3[13].xxxx, r1.xyzx
  22: mad r1.xyz, cb2[6].xyzx, cb3[13].zzzz, r1.xyzx
  23: mad r1.xyz, cb2[7].xyzx, cb3[13].wwww, r1.xyzx
  24: mul r2.xyz, cb2[5].xyzx, cb3[14].yyyy
  25: mad r2.xyz, cb2[4].xyzx, cb3[14].xxxx, r2.xyzx
  26: mad r2.xyz, cb2[6].xyzx, cb3[14].zzzz, r2.xyzx
  27: mad r2.xyz, cb2[7].xyzx, cb3[14].wwww, r2.xyzx
  28: mul r3.xyz, cb2[5].xyzx, cb3[15].yyyy
  29: mad r3.xyz, cb2[4].xyzx, cb3[15].xxxx, r3.xyzx
  30: mad r3.xyz, cb2[6].xyzx, cb3[15].zzzz, r3.xyzx
  31: mad r3.xyz, cb2[7].xyzx, cb3[15].wwww, r3.xyzx
  32: dp3 r1.x, r1.xyzx, v1.xyzx
  33: dp3 r1.y, r2.xyzx, v1.xyzx
  34: dp3 r1.z, r3.xyzx, v1.xyzx
  35: dp3 r0.w, r1.xyzx, r1.xyzx
  36: rsq r0.w, r0.w
  37: mul r1.xyz, r0.wwww, r1.xyzx
  38: mov r2.xyz, l(0,0,0,0)
  39: mov r0.w, l(0)
  40: loop 
  41:   ige r1.w, r0.w, cb0[3].x
  42:   breakc_nz r1.w
  43:   mad r3.xyz, -r0.xyzx, cb1[r0.w + 14].wwww, cb1[r0.w + 14].xyzx
  44:   dp3 r1.w, r3.xyzx, r3.xyzx
  45:   mad r2.w, cb1[r0.w + 22].z, r1.w, l(1.000000)
  46:   div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  47:   ne r3.w, l(0.000000), cb1[r0.w + 14].w
  48:   lt r4.x, cb1[r0.w + 22].w, r1.w
  49:   and r3.w, r3.w, r4.x
  50:   movc r2.w, r3.w, l(0), r2.w
  51:   max r1.w, r1.w, l(0.000001)
  52:   rsq r1.w, r1.w
  53:   mul r3.xyz, r1.wwww, r3.xyzx
  54:   dp3 r1.w, r3.xyzx, cb1[r0.w + 30].xyzx
  55:   max r1.w, r1.w, l(0.000000)
  56:   add r1.w, r1.w, -cb1[r0.w + 22].x
  57:   mul_sat r1.w, r1.w, cb1[r0.w + 22].y
  58:   mul r1.w, r1.w, r2.w
  59:   mul r1.w, r1.w, l(0.500000)
  60:   dp3 r2.w, r1.xyzx, r3.xyzx
  61:   max r2.w, r2.w, l(0.000000)
  62:   mul r3.xyz, r2.wwww, cb0[2].xyzx
  63:   mul r3.xyz, r3.xyzx, cb1[r0.w + 6].xyzx
  64:   mul r3.xyz, r1.wwww, r3.xyzx
  65:   min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  66:   add r2.xyz, r2.xyzx, r3.xyzx
  67:   iadd r0.w, r0.w, l(1)
  68: endloop 
  69: mov_sat o0.xyz, r2.xyzx
  70: mov_sat o0.w, cb0[2].w
  71: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  72: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  73: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  74: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  75: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  76: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  77: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  78: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  79: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  80: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles":
// Stats: 3 math, 1 textures
Shader Disassembly:
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixV;
uniform highp mat4 unity_MatrixInvV;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _Color;
uniform highp vec4 _MainTex_ST;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = _glesVertex.xyz;
  mediump vec3 lcolor_3;
  mediump vec3 eyeNormal_4;
  highp vec3 eyePos_5;
  mediump vec4 color_6;
  color_6 = vec4(0.0, 0.0, 0.0, 1.1);
  highp vec4 tmpvar_7;
  tmpvar_7.w = 1.0;
  tmpvar_7.xyz = tmpvar_1;
  eyePos_5 = ((unity_MatrixV * unity_ObjectToWorld) * tmpvar_7).xyz;
  highp mat4 m_8;
  m_8 = (unity_WorldToObject * unity_MatrixInvV);
  highp vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_9.x = m_8[0].x;
  tmpvar_9.y = m_8[1].x;
  tmpvar_9.z = m_8[2].x;
  tmpvar_9.w = m_8[3].x;
  tmpvar_10.x = m_8[0].y;
  tmpvar_10.y = m_8[1].y;
  tmpvar_10.z = m_8[2].y;
  tmpvar_10.w = m_8[3].y;
  tmpvar_11.x = m_8[0].z;
  tmpvar_11.y = m_8[1].z;
  tmpvar_11.z = m_8[2].z;
  tmpvar_11.w = m_8[3].z;
  highp mat3 tmpvar_12;
  tmpvar_12[0] = tmpvar_9.xyz;
  tmpvar_12[1] = tmpvar_10.xyz;
  tmpvar_12[2] = tmpvar_11.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize((tmpvar_12 * _glesNormal));
  eyeNormal_4 = tmpvar_13;
  lcolor_3 = vec3(0.0, 0.0, 0.0);
  for (highp int il_2 = 0; il_2 < 8; il_2++) {
    mediump float rho_14;
    mediump float att_15;
    highp vec3 dirToLight_16;
    dirToLight_16 = (unity_LightPosition[il_2].xyz - (eyePos_5 * unity_LightPosition[il_2].w));
    highp float tmpvar_17;
    tmpvar_17 = dot (dirToLight_16, dirToLight_16);
    att_15 = (1.0/((1.0 + (unity_LightAtten[il_2].z * tmpvar_17))));
    if (((unity_LightPosition[il_2].w != 0.0) && (tmpvar_17 > unity_LightAtten[il_2].w))) {
      att_15 = 0.0;
    };
    dirToLight_16 = (dirToLight_16 * inversesqrt(max (tmpvar_17, 1e-06)));
    highp float tmpvar_18;
    tmpvar_18 = max (dot (dirToLight_16, unity_SpotDirection[il_2].xyz), 0.0);
    rho_14 = tmpvar_18;
    att_15 = (att_15 * clamp ((
      (rho_14 - unity_LightAtten[il_2].x)
     * unity_LightAtten[il_2].y), 0.0, 1.0));
    att_15 = (att_15 * 0.5);
    mediump vec3 dirToLight_19;
    dirToLight_19 = dirToLight_16;
    lcolor_3 = (lcolor_3 + min ((
      ((max (dot (eyeNormal_4, dirToLight_19), 0.0) * _Color.xyz) * unity_LightColor[il_2].xyz)
     * att_15), vec3(1.0, 1.0, 1.0)));
  };
  color_6.xyz = lcolor_3;
  color_6.w = _Color.w;
  lowp vec4 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21 = clamp (color_6, 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_1;
  xlv_COLOR0 = tmpvar_20;
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  gl_Position = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_22));
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _Color;
uniform sampler2D _MainTex;
varying lowp vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 col_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture2D (_MainTex, xlv_TEXCOORD0);
  col_1.xyz = (tmpvar_2 * xlv_COLOR0).xyz;
  col_1.xyz = (col_1 * 2.0).xyz;
  col_1.w = (tmpvar_2.w * _Color.w);
  gl_FragData[0] = col_1;
}


#endif


-- Fragment shader for "gles":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "d3d11_9x":
// Stats: 72 math, 1 branches
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
  VectorInt4 unity_VertexLightParams at 48
  Vector4 _MainTex_ST at 64
}
Constant Buffer "UnityLighting" (752 bytes) on slot 1 {
  Vector4 unity_LightColor[8] at 96
  Vector4 unity_LightPosition[8] at 224
  Vector4 unity_LightAtten[8] at 352
  Vector4 unity_SpotDirection[8] at 480
}
Constant Buffer "UnityPerDraw" (160 bytes) on slot 2 {
  Matrix4x4 unity_ObjectToWorld at 0
  Matrix4x4 unity_WorldToObject at 64
}
Constant Buffer "UnityPerFrame" (368 bytes) on slot 3 {
  Matrix4x4 unity_MatrixV at 144
  Matrix4x4 unity_MatrixInvV at 208
  Matrix4x4 unity_MatrixVP at 272
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// TEXCOORD                 0   xyz         2     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Source Reg Component
// ---------- ------- ---------- ---------
// i0         cb0              3         0
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb1             0        38  ( FLT, FLT, FLT, FLT)
// c39        cb0             2         1  ( FLT, FLT, FLT, FLT)
// c40        cb0             4         1  ( FLT, FLT, FLT, FLT)
// c41        cb2             0         8  ( FLT, FLT, FLT, FLT)
// c49        cb3             9         7  ( FLT, FLT, FLT, FLT)
// c56        cb3            17         4  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c38                             Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_0
          def c60, 0, 1, 9.99999997e-007, 0.5
          dcl_texcoord v0
          dcl_texcoord1 v1
          dcl_texcoord2 v2
   0:     mov r0, c42
   1:     mul r1.xyz, r0.y, c50
   2:     mad r1.xyz, c49, r0.x, r1
   3:     mad r0.xyz, c51, r0.z, r1
   4:     mad r0.xyz, c52, r0.w, r0
   5:     mul r0.xyz, r0, v0.y
   6:     mov r1, c41
   7:     mul r2.xyz, r1.y, c50
   8:     mad r2.xyz, c49, r1.x, r2
   9:     mad r1.xyz, c51, r1.z, r2
  10:     mad r1.xyz, c52, r1.w, r1
  11:     mad r0.xyz, r1, v0.x, r0
  12:     mov r1, c43
  13:     mul r2.xyz, r1.y, c50
  14:     mad r2.xyz, c49, r1.x, r2
  15:     mad r1.xyz, c51, r1.z, r2
  16:     mad r1.xyz, c52, r1.w, r1
  17:     mad r0.xyz, r1, v0.z, r0
  18:     mov r1, c44
  19:     mul r2.xyz, r1.y, c50
  20:     mad r2.xyz, c49, r1.x, r2
  21:     mad r1.xyz, c51, r1.z, r2
  22:     mad r1.xyz, c52, r1.w, r1
  23:     add r0.xyz, r0, r1
  24:     mov r1, c53
  25:     mul r2.xyz, r1.y, c46
  26:     mad r2.xyz, c45, r1.x, r2
  27:     mad r1.xyz, c47, r1.z, r2
  28:     mad r1.xyz, c48, r1.w, r1
  29:     dp3 r1.x, r1, v1
  30:     mov r2, c54
  31:     mul r3.xyz, r2.y, c46
  32:     mad r3.xyz, c45, r2.x, r3
  33:     mad r2.xyz, c47, r2.z, r3
  34:     mad r2.xyz, c48, r2.w, r2
  35:     dp3 r1.y, r2, v1
  36:     mov r2, c55
  37:     mul r3.xyz, r2.y, c46
  38:     mad r3.xyz, c45, r2.x, r3
  39:     mad r2.xyz, c47, r2.z, r3
  40:     mad r2.xyz, c48, r2.w, r2
  41:     dp3 r1.z, r2, v1
  42:     nrm r2.xyz, r1
  45:     mov r1.xyz, c60.x
  46:     loop aL, i0
  49:       mad r3.xyz, r0, -c14[aL].w, c14[aL]
  50:       dp3 r0.w, r3, r3
  51:       max r1.w, r0.w, c60.z
  52:       rsq r1.w, r1.w
  53:       mul r3.xyz, r1.w, r3
  54:       dp3 r1.w, r2, r3
  55:       mul r2.w, c14[aL].w, c14[aL].w
  56:       slt r2.w, -r2.w, r2.w
  57:       slt r3.w, c22[aL].w, r0.w
  58:       mul r2.w, r2.w, r3.w
  59:       mul r0.w, r0.w, c22[aL].z
  60:       add r0.w, r0.w, c60.y
  61:       rcp r0.w, r0.w
  62:       mad r0.w, r2.w, -r0.w, r0.w
  63:       dp3 r2.w, r3, c30[aL]
  64:       max r2.w, r2.w, c60.x
  65:       add r2.w, r2.w, -c22[aL].x
  66:       mul r2.w, r2.w, c22[aL].y
  67:       max r2.w, r2.w, c60.x
  68:       min r2.w, r2.w, c60.y
  69:       mul r0.w, r0.w, r2.w
  70:       mul r0.w, r0.w, c60.w
  71:       max r1.w, r1.w, c60.x
  72:       mul r3.xyz, r1.w, c39
  73:       mul r3.xyz, r3, c6[aL]
  74:       mul r3.xyz, r0.w, r3
  75:       min r3.xyz, r3, c60.y
  76:       add r1.xyz, r1, r3
  77:     endloop
  79:     max r0.xyz, r1, c60.x
  80:     mov r1.x, c60.x
  81:     max r0.w, r1.x, c39.w
  82:     min oT0, r0, c60.y
  83:     mad oT1.xy, v2, c40, c40.zwzw
  84:     mul r0, v0.y, c42
  85:     mad r0, c41, v0.x, r0
  86:     mad r0, c43, v0.z, r0
  87:     add r0, r0, c44
  88:     mul r1, r0.y, c57
  89:     mad r1, c56, r0.x, r1
  90:     mad r1, c58, r0.z, r1
  91:     mad r0, c59, r0.w, r1
  92:     mad oPos.xy, r0.w, c38, r0
  93:     mov oPos.zw, r0

// approximately 94 instruction slots used
      vs_4_0
      dcl_constantbuffer CB0[5], immediateIndexed
      dcl_constantbuffer CB1[38], dynamicIndexed
      dcl_constantbuffer CB2[8], immediateIndexed
      dcl_constantbuffer CB3[21], immediateIndexed
      dcl_input v0.xyz
      dcl_input v1.xyz
      dcl_input v2.xy
      dcl_output o0.xyzw
      dcl_output o1.xy
      dcl_output_siv o2.xyzw, position
      dcl_temps 5
   0: mul r0.xyz, cb2[0].yyyy, cb3[10].xyzx
   1: mad r0.xyz, cb3[9].xyzx, cb2[0].xxxx, r0.xyzx
   2: mad r0.xyz, cb3[11].xyzx, cb2[0].zzzz, r0.xyzx
   3: mad r0.xyz, cb3[12].xyzx, cb2[0].wwww, r0.xyzx
   4: mul r1.xyz, cb2[1].yyyy, cb3[10].xyzx
   5: mad r1.xyz, cb3[9].xyzx, cb2[1].xxxx, r1.xyzx
   6: mad r1.xyz, cb3[11].xyzx, cb2[1].zzzz, r1.xyzx
   7: mad r1.xyz, cb3[12].xyzx, cb2[1].wwww, r1.xyzx
   8: mul r2.xyz, cb2[2].yyyy, cb3[10].xyzx
   9: mad r2.xyz, cb3[9].xyzx, cb2[2].xxxx, r2.xyzx
  10: mad r2.xyz, cb3[11].xyzx, cb2[2].zzzz, r2.xyzx
  11: mad r2.xyz, cb3[12].xyzx, cb2[2].wwww, r2.xyzx
  12: mul r3.xyz, cb2[3].yyyy, cb3[10].xyzx
  13: mad r3.xyz, cb3[9].xyzx, cb2[3].xxxx, r3.xyzx
  14: mad r3.xyz, cb3[11].xyzx, cb2[3].zzzz, r3.xyzx
  15: mad r3.xyz, cb3[12].xyzx, cb2[3].wwww, r3.xyzx
  16: mul r1.xyz, r1.xyzx, v0.yyyy
  17: mad r0.xyz, r0.xyzx, v0.xxxx, r1.xyzx
  18: mad r0.xyz, r2.xyzx, v0.zzzz, r0.xyzx
  19: add r0.xyz, r3.xyzx, r0.xyzx
  20: mul r1.xyz, cb2[5].xyzx, cb3[13].yyyy
  21: mad r1.xyz, cb2[4].xyzx, cb3[13].xxxx, r1.xyzx
  22: mad r1.xyz, cb2[6].xyzx, cb3[13].zzzz, r1.xyzx
  23: mad r1.xyz, cb2[7].xyzx, cb3[13].wwww, r1.xyzx
  24: mul r2.xyz, cb2[5].xyzx, cb3[14].yyyy
  25: mad r2.xyz, cb2[4].xyzx, cb3[14].xxxx, r2.xyzx
  26: mad r2.xyz, cb2[6].xyzx, cb3[14].zzzz, r2.xyzx
  27: mad r2.xyz, cb2[7].xyzx, cb3[14].wwww, r2.xyzx
  28: mul r3.xyz, cb2[5].xyzx, cb3[15].yyyy
  29: mad r3.xyz, cb2[4].xyzx, cb3[15].xxxx, r3.xyzx
  30: mad r3.xyz, cb2[6].xyzx, cb3[15].zzzz, r3.xyzx
  31: mad r3.xyz, cb2[7].xyzx, cb3[15].wwww, r3.xyzx
  32: dp3 r1.x, r1.xyzx, v1.xyzx
  33: dp3 r1.y, r2.xyzx, v1.xyzx
  34: dp3 r1.z, r3.xyzx, v1.xyzx
  35: dp3 r0.w, r1.xyzx, r1.xyzx
  36: rsq r0.w, r0.w
  37: mul r1.xyz, r0.wwww, r1.xyzx
  38: mov r2.xyz, l(0,0,0,0)
  39: mov r0.w, l(0)
  40: loop 
  41:   ige r1.w, r0.w, cb0[3].x
  42:   breakc_nz r1.w
  43:   mad r3.xyz, -r0.xyzx, cb1[r0.w + 14].wwww, cb1[r0.w + 14].xyzx
  44:   dp3 r1.w, r3.xyzx, r3.xyzx
  45:   mad r2.w, cb1[r0.w + 22].z, r1.w, l(1.000000)
  46:   div r2.w, l(1.000000, 1.000000, 1.000000, 1.000000), r2.w
  47:   ne r3.w, l(0.000000), cb1[r0.w + 14].w
  48:   lt r4.x, cb1[r0.w + 22].w, r1.w
  49:   and r3.w, r3.w, r4.x
  50:   movc r2.w, r3.w, l(0), r2.w
  51:   max r1.w, r1.w, l(0.000001)
  52:   rsq r1.w, r1.w
  53:   mul r3.xyz, r1.wwww, r3.xyzx
  54:   dp3 r1.w, r3.xyzx, cb1[r0.w + 30].xyzx
  55:   max r1.w, r1.w, l(0.000000)
  56:   add r1.w, r1.w, -cb1[r0.w + 22].x
  57:   mul_sat r1.w, r1.w, cb1[r0.w + 22].y
  58:   mul r1.w, r1.w, r2.w
  59:   mul r1.w, r1.w, l(0.500000)
  60:   dp3 r2.w, r1.xyzx, r3.xyzx
  61:   max r2.w, r2.w, l(0.000000)
  62:   mul r3.xyz, r2.wwww, cb0[2].xyzx
  63:   mul r3.xyz, r3.xyzx, cb1[r0.w + 6].xyzx
  64:   mul r3.xyz, r1.wwww, r3.xyzx
  65:   min r3.xyz, r3.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  66:   add r2.xyz, r2.xyzx, r3.xyzx
  67:   iadd r0.w, r0.w, l(1)
  68: endloop 
  69: mov_sat o0.xyz, r2.xyzx
  70: mov_sat o0.w, cb0[2].w
  71: mad o1.xy, v2.xyxx, cb0[4].xyxx, cb0[4].zwzz
  72: mul r0.xyzw, v0.yyyy, cb2[1].xyzw
  73: mad r0.xyzw, cb2[0].xyzw, v0.xxxx, r0.xyzw
  74: mad r0.xyzw, cb2[2].xyzw, v0.zzzz, r0.xyzw
  75: add r0.xyzw, r0.xyzw, cb2[3].xyzw
  76: mul r1.xyzw, r0.yyyy, cb3[18].xyzw
  77: mad r1.xyzw, cb3[17].xyzw, r0.xxxx, r1.xyzw
  78: mad r1.xyzw, cb3[19].xyzw, r0.zzzz, r1.xyzw
  79: mad o2.xyzw, cb3[20].xyzw, r0.wwww, r1.xyzw
  80: ret 
// Approximately 0 instruction slots used


-- Fragment shader for "d3d11_9x":
// Stats: 3 math, 1 textures
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "$Globals" (80 bytes) on slot 0 {
  Vector4 _Color at 32
}

Shader Disassembly:
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// COLOR                    0   xyzw        0     NONE   float   xyz 
// TEXCOORD                 0   xy          1     NONE   float   xy  
// SV_POSITION              0   xyzw        2      POS   float       
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             2         1  ( FLT, FLT, FLT, FLT)
//
//
// Sampler/Resource to DX9 shader sampler mappings:
//
// Target Sampler Source Sampler  Source Resource
// -------------- --------------- ----------------
// s0             s0              t0               
//
//
// Level9 shader bytecode:
//
    ps_2_0
          dcl_pp t0
          dcl t1.xy
          dcl_2d s0
   0:     texld_pp r0, t1, s0
   0:     mul_pp r0.xyz, r0, t0
   1:     mul_pp r1.w, r0.w, c0.w
   2:     add_pp r1.xyz, r0, r0
   3:     mov_pp oC0, r1

// approximately 5 instruction slots used (1 texture, 4 arithmetic)
      ps_4_0
      dcl_constantbuffer CB0[3], immediateIndexed
      dcl_sampler s0, mode_default
      dcl_resource_texture2d (float,float,float,float) t0
      dcl_input_ps linear v0.xyz
      dcl_input_ps linear v1.xy
      dcl_output o0.xyzw
      dcl_temps 1
   0: sample r0.xyzw, v1.xyxx, t0.xyzw, s0
   1: mul r0.xyz, r0.xyzx, v0.xyzx
   2: mul o0.w, r0.w, cb0[2].w
   3: add o0.xyz, r0.xyzx, r0.xyzx
   4: ret 
// Approximately 0 instruction slots used


-- Vertex shader for "gles3":
Shader Disassembly:
#ifdef VERTEX
#version 300 es

uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in highp vec3 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec3 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
bool u_xlatb9;
float u_xlat18;
int u_xlati18;
float u_xlat19;
bool u_xlatb19;
float u_xlat20;
mediump float u_xlat16_22;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, in_NORMAL0.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;
    u_xlat16_4.x = float(0.0);
    u_xlat16_4.y = float(0.0);
    u_xlat16_4.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat20 = unity_LightAtten[u_xlati_loop_1].z * u_xlat19 + 1.0;
        u_xlat20 = float(1.0) / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlatb3 = !!(0.0!=unity_LightPosition[u_xlati_loop_1].w);
#else
        u_xlatb3 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(unity_LightAtten[u_xlati_loop_1].w<u_xlat19);
#else
        u_xlatb9 = unity_LightAtten[u_xlati_loop_1].w<u_xlat19;
#endif
        u_xlatb3 = u_xlatb9 && u_xlatb3;
        u_xlat16_22 = (u_xlatb3) ? 0.0 : u_xlat20;
        u_xlat19 = max(u_xlat19, 9.99999997e-007);
        u_xlat19 = inversesqrt(u_xlat19);
        u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;
        u_xlat19 = dot(u_xlat2.xyz, unity_SpotDirection[u_xlati_loop_1].xyz);
        u_xlat19 = max(u_xlat19, 0.0);
        u_xlat16_5.x = u_xlat19 + (-unity_LightAtten[u_xlati_loop_1].x);
        u_xlat16_5.x = u_xlat16_5.x * unity_LightAtten[u_xlati_loop_1].y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
        u_xlat16_22 = u_xlat16_22 * u_xlat16_5.x;
        u_xlat16_22 = u_xlat16_22 * 0.5;
        u_xlat16_5.x = dot(u_xlat1.xyz, u_xlat2.xyz);
        u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
        u_xlat16_5.xyz = u_xlat16_5.xxx * _Color.xyz;
        u_xlat16_5.xyz = u_xlat16_5.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat16_5.xyz = vec3(u_xlat16_22) * u_xlat16_5.xyz;
        u_xlat16_5.xyz = min(u_xlat16_5.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat16_4.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
    }
    vs_COLOR0.xyz = u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.xyz = min(max(vs_COLOR0.xyz, 0.0), 1.0);
#else
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
#endif
    vs_COLOR0.w = _Color.w;
#ifdef UNITY_ADRENO_ES3
    vs_COLOR0.w = min(max(vs_COLOR0.w, 0.0), 1.0);
#else
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
#endif
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump vec4 _Color;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
lowp vec4 u_xlat10_0;
mediump vec3 u_xlat16_1;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat16_1.xyz + u_xlat16_1.xyz;
    return;
}

#endif


-- Fragment shader for "gles3":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "metal":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Constant Buffer "Globals" (752 bytes) on slot 0 {
  Matrix4x4 unity_ObjectToWorld at 384
  Matrix4x4 unity_WorldToObject at 448
  Matrix4x4 unity_MatrixV at 512
  Matrix4x4 unity_MatrixInvV at 576
  Matrix4x4 unity_MatrixVP at 640
  VectorHalf4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 64
  VectorHalf4 unity_LightAtten[8] at 192
  Vector4 unity_SpotDirection[8] at 256
  VectorHalf4 _Color at 704
  VectorInt4 unity_VertexLightParams at 720
  Vector4 _MainTex_ST at 736
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 unity_LightColor[8];
    float4 unity_LightPosition[8];
    half4 unity_LightAtten[8];
    float4 unity_SpotDirection[8];
    float4 hlslcc_mtx4x4unity_ObjectToWorld[4];
    float4 hlslcc_mtx4x4unity_WorldToObject[4];
    float4 hlslcc_mtx4x4unity_MatrixV[4];
    float4 hlslcc_mtx4x4unity_MatrixInvV[4];
    float4 hlslcc_mtx4x4unity_MatrixVP[4];
    half4 _Color;
    int4 unity_VertexLightParams;
    float4 _MainTex_ST;
};

struct Mtl_VertexIn
{
    float3 POSITION0 [[ attribute(0) ]] ;
    float3 NORMAL0 [[ attribute(1) ]] ;
    float3 TEXCOORD0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    half4 COLOR0 [[ user(COLOR0) ]];
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    float4 u_xlat1;
    float3 u_xlat2;
    float3 u_xlat3;
    bool u_xlatb3;
    half3 u_xlat16_4;
    half3 u_xlat16_5;
    bool u_xlatb9;
    float u_xlat18;
    int u_xlati18;
    float u_xlat19;
    bool u_xlatb19;
    float u_xlat20;
    half u_xlat16_22;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * Globals.hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[0].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[2].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_MatrixV[3].xyz * Globals.hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * input.POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * input.POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * input.POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[1].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[0].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[2].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = Globals.hlslcc_mtx4x4unity_WorldToObject[3].xyz * Globals.hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, input.NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, input.NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, input.NORMAL0.xyz);
    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat18 = rsqrt(u_xlat18);
    u_xlat1.xyz = float3(u_xlat18) * u_xlat1.xyz;
    u_xlat16_4.x = half(0.0);
    u_xlat16_4.y = half(0.0);
    u_xlat16_4.z = half(0.0);
    u_xlati18 = 0x0;
    while(true){
        u_xlatb19 = u_xlati18>=Globals.unity_VertexLightParams.x;
        if(u_xlatb19){break;}
        u_xlat2.xyz = (-u_xlat0.xyz) * Globals.unity_LightPosition[u_xlati18].www + Globals.unity_LightPosition[u_xlati18].xyz;
        u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);
        u_xlat20 = float(Globals.unity_LightAtten[u_xlati18].z) * u_xlat19 + 1.0;
        u_xlat20 = float(1.0) / u_xlat20;
        u_xlatb3 = 0.0!=Globals.unity_LightPosition[u_xlati18].w;
        u_xlatb9 = Globals.unity_LightAtten[u_xlati18].w<half(u_xlat19);
        u_xlatb3 = u_xlatb9 && u_xlatb3;
        u_xlat16_22 = (u_xlatb3) ? 0.0 : half(u_xlat20);
        u_xlat19 = max(u_xlat19, 9.99999997e-007);
        u_xlat19 = rsqrt(u_xlat19);
        u_xlat2.xyz = float3(u_xlat19) * u_xlat2.xyz;
        u_xlat19 = dot(u_xlat2.xyz, Globals.unity_SpotDirection[u_xlati18].xyz);
        u_xlat19 = max(u_xlat19, 0.0);
        u_xlat16_5.x = half(u_xlat19 + (-float(Globals.unity_LightAtten[u_xlati18].x)));
        u_xlat16_5.x = half(u_xlat16_5.x * Globals.unity_LightAtten[u_xlati18].y);
        u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0h, 1.0h);
        u_xlat16_22 = half(u_xlat16_22 * u_xlat16_5.x);
        u_xlat16_22 = half(float(u_xlat16_22) * 0.5);
        u_xlat16_5.x = dot(u_xlat1.xyz, u_xlat2.xyz);
        u_xlat16_5.x = half(max(float(u_xlat16_5.x), 0.0));
        u_xlat16_5.xyz = half3(u_xlat16_5.xxx * Globals._Color.xyz);
        u_xlat16_5.xyz = half3(u_xlat16_5.xyz * Globals.unity_LightColor[u_xlati18].xyz);
        u_xlat16_5.xyz = half3(half3(u_xlat16_22) * u_xlat16_5.xyz);
        u_xlat16_5.xyz = half3(min(float3(u_xlat16_5.xyz), float3(1.0, 1.0, 1.0)));
        u_xlat16_4.xyz = half3(u_xlat16_4.xyz + u_xlat16_5.xyz);
        u_xlati18 = u_xlati18 + 0x1;
    }
    output.COLOR0.xyz = u_xlat16_4.xyz;
    output.COLOR0.xyz = clamp(output.COLOR0.xyz, 0.0h, 1.0h);
    output.COLOR0.w = Globals._Color.w;
    output.COLOR0.w = clamp(output.COLOR0.w, 0.0h, 1.0h);
    output.TEXCOORD0.xy = input.TEXCOORD0.xy * Globals._MainTex_ST.xy + Globals._MainTex_ST.zw;
    u_xlat0 = input.POSITION0.yyyy * Globals.hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[0] * input.POSITION0.xxxx + u_xlat0;
    u_xlat0 = Globals.hlslcc_mtx4x4unity_ObjectToWorld[2] * input.POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + Globals.hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * Globals.hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = Globals.hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    output.mtl_Position = Globals.hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return output;
}


-- Fragment shader for "metal":
Set 2D Texture "_MainTex" to slot 0

Constant Buffer "Globals" (8 bytes) on slot 0 {
  VectorHalf4 _Color at 0
}

Shader Disassembly:
#include <metal_stdlib>
#include <metal_texture>
using namespace metal;
struct Globals_Type
{
    half4 _Color;
};

struct Mtl_FragmentIn
{
    half4 COLOR0 [[ user(COLOR0) ]] ;
    float2 TEXCOORD0 [[ user(TEXCOORD0) ]] ;
};

struct Mtl_FragmentOut
{
    half4 SV_Target0 [[ color(0) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant Globals_Type& Globals [[ buffer(0) ]],
    texture2d<half, access::sample > _MainTex [[ texture (0) ]] ,
    sampler sampler_MainTex [[ sampler (0) ]] ,
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    half4 u_xlat16_0;
    half3 u_xlat16_1;
    u_xlat16_0 = _MainTex.sample(sampler_MainTex, input.TEXCOORD0.xy);
    u_xlat16_1.xyz = half3(u_xlat16_0.xyz * input.COLOR0.xyz);
    output.SV_Target0.w = half(u_xlat16_0.w * Globals._Color.w);
    output.SV_Target0.xyz = half3(u_xlat16_1.xyz + u_xlat16_1.xyz);
    return output;
}


-- Vertex shader for "glcore":
Shader Disassembly:
#ifdef VERTEX
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixInvV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _Color;
uniform 	ivec4 unity_VertexLightParams;
uniform 	vec4 _MainTex_ST;
in  vec3 in_POSITION0;
in  vec3 in_NORMAL0;
in  vec3 in_TEXCOORD0;
out vec4 vs_COLOR0;
out vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
bool u_xlatb4;
float u_xlat15;
int u_xlati15;
float u_xlat16;
bool u_xlatb16;
float u_xlat17;
bool u_xlatb18;
void main()
{
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;
    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat1.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat2.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat3.xyz;
    u_xlat1.x = dot(u_xlat1.xyz, in_NORMAL0.xyz);
    u_xlat1.y = dot(u_xlat2.xyz, in_NORMAL0.xyz);
    u_xlat1.z = dot(u_xlat3.xyz, in_NORMAL0.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)
    {
        u_xlat3.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;
        u_xlat16 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat17 = unity_LightAtten[u_xlati_loop_1].z * u_xlat16 + 1.0;
        u_xlat17 = float(1.0) / u_xlat17;
        u_xlatb18 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;
        u_xlatb4 = unity_LightAtten[u_xlati_loop_1].w<u_xlat16;
        u_xlatb18 = u_xlatb18 && u_xlatb4;
        u_xlat17 = (u_xlatb18) ? 0.0 : u_xlat17;
        u_xlat16 = max(u_xlat16, 9.99999997e-007);
        u_xlat16 = inversesqrt(u_xlat16);
        u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
        u_xlat16 = dot(u_xlat3.xyz, unity_SpotDirection[u_xlati_loop_1].xyz);
        u_xlat16 = max(u_xlat16, 0.0);
        u_xlat16 = u_xlat16 + (-unity_LightAtten[u_xlati_loop_1].x);
        u_xlat16 = u_xlat16 * unity_LightAtten[u_xlati_loop_1].y;
        u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
        u_xlat16 = u_xlat16 * u_xlat17;
        u_xlat16 = u_xlat16 * 0.5;
        u_xlat17 = dot(u_xlat1.xyz, u_xlat3.xyz);
        u_xlat17 = max(u_xlat17, 0.0);
        u_xlat3.xyz = vec3(u_xlat17) * _Color.xyz;
        u_xlat3.xyz = u_xlat3.xyz * unity_LightColor[u_xlati_loop_1].xyz;
        u_xlat3.xyz = vec3(u_xlat16) * u_xlat3.xyz;
        u_xlat3.xyz = min(u_xlat3.xyz, vec3(1.0, 1.0, 1.0));
        u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    }
    vs_COLOR0.xyz = u_xlat2.xyz;
    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);
    vs_COLOR0.w = _Color.w;
    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 150
#extension GL_ARB_explicit_attrib_location : require
#extension GL_ARB_shader_bit_encoding : enable

uniform 	vec4 _Color;
uniform  sampler2D _MainTex;
in  vec4 vs_COLOR0;
in  vec2 vs_TEXCOORD0;
layout(location = 0) out vec4 SV_Target0;
vec3 u_xlat0;
vec4 u_xlat10_0;
void main()
{
    u_xlat10_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat0.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;
    SV_Target0.w = u_xlat10_0.w * _Color.w;
    SV_Target0.xyz = u_xlat0.xyz + u_xlat0.xyz;
    return;
}

#endif


-- Fragment shader for "glcore":
Shader Disassembly:
// All GLSL source is contained within the vertex program

-- Vertex shader for "vulkan":
Uses vertex data channel "Vertex"
Uses vertex data channel "Color"
Uses vertex data channel "TexCoord"

Set 2D Texture "_MainTex" to set: 0, binding: 0, used in: Fragment 

Constant Buffer "PGlobals3846234183" (16 bytes) on set: 1, binding: 0, used in: Fragment  {
  Vector4 _Color at 0
}
Constant Buffer "VGlobals3846234183" (880 bytes) on set: 1, binding: 1, used in: Vertex  {
  Matrix4x4 unity_MatrixInvV at 704
  Matrix4x4 unity_MatrixV at 640
  Matrix4x4 unity_MatrixVP at 768
  Matrix4x4 unity_ObjectToWorld at 512
  Matrix4x4 unity_WorldToObject at 576
  Vector4 _Color at 832
  Vector4 _MainTex_ST at 864
  Vector4 unity_LightAtten[8] at 256
  Vector4 unity_LightColor[8] at 0
  Vector4 unity_LightPosition[8] at 128
  Vector4 unity_SpotDirection[8] at 384
  VectorInt4 unity_VertexLightParams at 848
}

Shader Disassembly:
Disassembly for Vertex:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 626

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Vertex 4  "main" 200 348 529 550 551 609
                              Decorate 12 ArrayStride 16
                              Decorate 13 ArrayStride 16
                              Decorate 14 ArrayStride 16
                              Decorate 15 ArrayStride 16
                              Decorate 17 ArrayStride 16
                              Decorate 18 ArrayStride 16
                              Decorate 19 ArrayStride 16
                              Decorate 20 ArrayStride 16
                              Decorate 21 ArrayStride 16
                              MemberDecorate 24 0 RelaxedPrecision
                              MemberDecorate 24 0 Offset 0
                              MemberDecorate 24 1 Offset 128
                              MemberDecorate 24 2 RelaxedPrecision
                              MemberDecorate 24 2 Offset 256
                              MemberDecorate 24 3 Offset 384
                              MemberDecorate 24 4 Offset 512
                              MemberDecorate 24 5 Offset 576
                              MemberDecorate 24 6 Offset 640
                              MemberDecorate 24 7 Offset 704
                              MemberDecorate 24 8 Offset 768
                              MemberDecorate 24 9 RelaxedPrecision
                              MemberDecorate 24 9 Offset 832
                              MemberDecorate 24 10 Offset 848
                              MemberDecorate 24 11 Offset 864
                              Decorate 24 Block
                              Decorate 26 DescriptorSet 1
                              Decorate 26 Binding 1
                              Decorate 200 Location 0
                              Decorate 348 Location 1
                              Decorate 379 RelaxedPrecision
                              Decorate 419 RelaxedPrecision
                              Decorate 436 RelaxedPrecision
                              Decorate 442 RelaxedPrecision
                              Decorate 468 RelaxedPrecision
                              Decorate 472 RelaxedPrecision
                              Decorate 473 RelaxedPrecision
                              Decorate 477 RelaxedPrecision
                              Decorate 480 RelaxedPrecision
                              Decorate 481 RelaxedPrecision
                              Decorate 484 RelaxedPrecision
                              Decorate 485 RelaxedPrecision
                              Decorate 487 RelaxedPrecision
                              Decorate 489 RelaxedPrecision
                              Decorate 490 RelaxedPrecision
                              Decorate 491 RelaxedPrecision
                              Decorate 493 RelaxedPrecision
                              Decorate 500 RelaxedPrecision
                              Decorate 501 RelaxedPrecision
                              Decorate 503 RelaxedPrecision
                              Decorate 504 RelaxedPrecision
                              Decorate 507 RelaxedPrecision
                              Decorate 508 RelaxedPrecision
                              Decorate 509 RelaxedPrecision
                              Decorate 510 RelaxedPrecision
                              Decorate 513 RelaxedPrecision
                              Decorate 514 RelaxedPrecision
                              Decorate 515 RelaxedPrecision
                              Decorate 516 RelaxedPrecision
                              Decorate 517 RelaxedPrecision
                              Decorate 518 RelaxedPrecision
                              Decorate 519 RelaxedPrecision
                              Decorate 520 RelaxedPrecision
                              Decorate 522 RelaxedPrecision
                              Decorate 523 RelaxedPrecision
                              Decorate 524 RelaxedPrecision
                              Decorate 525 RelaxedPrecision
                              Decorate 529 RelaxedPrecision
                              Decorate 529 Location 0
                              Decorate 530 RelaxedPrecision
                              Decorate 533 RelaxedPrecision
                              Decorate 534 RelaxedPrecision
                              Decorate 535 RelaxedPrecision
                              Decorate 536 RelaxedPrecision
                              Decorate 537 RelaxedPrecision
                              Decorate 541 RelaxedPrecision
                              Decorate 545 RelaxedPrecision
                              Decorate 546 RelaxedPrecision
                              Decorate 550 Location 1
                              Decorate 551 Location 2
                              MemberDecorate 607 0 BuiltIn Position
                              MemberDecorate 607 1 BuiltIn PointSize
                              MemberDecorate 607 2 BuiltIn ClipDistance
                              Decorate 607 Block
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeInt 32 0
              11:     10(int) Constant 8
              12:             TypeArray 7(fvec4) 11
              13:             TypeArray 7(fvec4) 11
              14:             TypeArray 7(fvec4) 11
              15:             TypeArray 7(fvec4) 11
              16:     10(int) Constant 4
              17:             TypeArray 7(fvec4) 16
              18:             TypeArray 7(fvec4) 16
              19:             TypeArray 7(fvec4) 16
              20:             TypeArray 7(fvec4) 16
              21:             TypeArray 7(fvec4) 16
              22:             TypeInt 32 1
              23:             TypeVector 22(int) 4
              24:             TypeStruct 12 13 14 15 17 18 19 20 21 7(fvec4) 23(ivec4) 7(fvec4)
              25:             TypePointer Uniform 24(struct)
              26:     25(ptr) Variable Uniform
              27:     22(int) Constant 4
              28:     22(int) Constant 0
              29:             TypeVector 6(float) 3
              30:             TypePointer Uniform 7(fvec4)
              34:     22(int) Constant 6
              35:     22(int) Constant 1
              54:     22(int) Constant 2
              67:     22(int) Constant 3
              80:      8(ptr) Variable Private
             126:             TypePointer Private 29(fvec3)
             127:    126(ptr) Variable Private
             162:    126(ptr) Variable Private
             199:             TypePointer Input 29(fvec3)
             200:    199(ptr) Variable Input
             231:     22(int) Constant 5
             235:     22(int) Constant 7
             348:    199(ptr) Variable Input
             351:     10(int) Constant 0
             352:             TypePointer Private 6(float)
             357:     10(int) Constant 1
             362:     10(int) Constant 2
             364:    352(ptr) Variable Private
             379:    126(ptr) Variable Private
             380:    6(float) Constant 0
             384:             TypePointer Function 22(int)
             392:     22(int) Constant 10
             393:             TypePointer Uniform 22(int)
             396:             TypeBool
             411:    352(ptr) Variable Private
             415:    352(ptr) Variable Private
             417:             TypePointer Uniform 6(float)
             422:    6(float) Constant 1065353216
             426:             TypePointer Private 396(bool)
             427:    426(ptr) Variable Private
             429:     10(int) Constant 3
             433:    426(ptr) Variable Private
             442:    352(ptr) Variable Private
             443:             TypePointer Function 6(float)
             452:    6(float) Constant 897988541
             468:    126(ptr) Variable Private
             492:    6(float) Constant 1056964608
             505:     22(int) Constant 9
             521:   29(fvec3) ConstantComposite 422 422 422
             528:             TypePointer Output 7(fvec4)
             529:    528(ptr) Variable Output
             542:             TypePointer Output 6(float)
             548:             TypeVector 6(float) 2
             549:             TypePointer Output 548(fvec2)
             550:    549(ptr) Variable Output
             551:    199(ptr) Variable Input
             554:     22(int) Constant 11
             588:     22(int) Constant 8
             606:             TypeArray 6(float) 357
             607:             TypeStruct 7(fvec4) 6(float) 606
             608:             TypePointer Output 607(struct)
             609:    608(ptr) Variable Output
             623:             TypePointer Private 22(int)
             624:    623(ptr) Variable Private
             625:    426(ptr) Variable Private
               4:           2 Function None 3
               5:             Label
             385:    384(ptr) Variable Function
             444:    443(ptr) Variable Function
              31:     30(ptr) AccessChain 26 27 28
              32:    7(fvec4) Load 31
              33:   29(fvec3) VectorShuffle 32 32 1 1 1
              36:     30(ptr) AccessChain 26 34 35
              37:    7(fvec4) Load 36
              38:   29(fvec3) VectorShuffle 37 37 0 1 2
              39:   29(fvec3) FMul 33 38
              40:    7(fvec4) Load 9
              41:    7(fvec4) VectorShuffle 40 39 4 5 6 3
                              Store 9 41
              42:     30(ptr) AccessChain 26 34 28
              43:    7(fvec4) Load 42
              44:   29(fvec3) VectorShuffle 43 43 0 1 2
              45:     30(ptr) AccessChain 26 27 28
              46:    7(fvec4) Load 45
              47:   29(fvec3) VectorShuffle 46 46 0 0 0
              48:   29(fvec3) FMul 44 47
              49:    7(fvec4) Load 9
              50:   29(fvec3) VectorShuffle 49 49 0 1 2
              51:   29(fvec3) FAdd 48 50
              52:    7(fvec4) Load 9
              53:    7(fvec4) VectorShuffle 52 51 4 5 6 3
                              Store 9 53
              55:     30(ptr) AccessChain 26 34 54
              56:    7(fvec4) Load 55
              57:   29(fvec3) VectorShuffle 56 56 0 1 2
              58:     30(ptr) AccessChain 26 27 28
              59:    7(fvec4) Load 58
              60:   29(fvec3) VectorShuffle 59 59 2 2 2
              61:   29(fvec3) FMul 57 60
              62:    7(fvec4) Load 9
              63:   29(fvec3) VectorShuffle 62 62 0 1 2
              64:   29(fvec3) FAdd 61 63
              65:    7(fvec4) Load 9
              66:    7(fvec4) VectorShuffle 65 64 4 5 6 3
                              Store 9 66
              68:     30(ptr) AccessChain 26 34 67
              69:    7(fvec4) Load 68
              70:   29(fvec3) VectorShuffle 69 69 0 1 2
              71:     30(ptr) AccessChain 26 27 28
              72:    7(fvec4) Load 71
              73:   29(fvec3) VectorShuffle 72 72 3 3 3
              74:   29(fvec3) FMul 70 73
              75:    7(fvec4) Load 9
              76:   29(fvec3) VectorShuffle 75 75 0 1 2
              77:   29(fvec3) FAdd 74 76
              78:    7(fvec4) Load 9
              79:    7(fvec4) VectorShuffle 78 77 4 5 6 3
                              Store 9 79
              81:     30(ptr) AccessChain 26 27 35
              82:    7(fvec4) Load 81
              83:   29(fvec3) VectorShuffle 82 82 1 1 1
              84:     30(ptr) AccessChain 26 34 35
              85:    7(fvec4) Load 84
              86:   29(fvec3) VectorShuffle 85 85 0 1 2
              87:   29(fvec3) FMul 83 86
              88:    7(fvec4) Load 80
              89:    7(fvec4) VectorShuffle 88 87 4 5 6 3
                              Store 80 89
              90:     30(ptr) AccessChain 26 34 28
              91:    7(fvec4) Load 90
              92:   29(fvec3) VectorShuffle 91 91 0 1 2
              93:     30(ptr) AccessChain 26 27 35
              94:    7(fvec4) Load 93
              95:   29(fvec3) VectorShuffle 94 94 0 0 0
              96:   29(fvec3) FMul 92 95
              97:    7(fvec4) Load 80
              98:   29(fvec3) VectorShuffle 97 97 0 1 2
              99:   29(fvec3) FAdd 96 98
             100:    7(fvec4) Load 80
             101:    7(fvec4) VectorShuffle 100 99 4 5 6 3
                              Store 80 101
             102:     30(ptr) AccessChain 26 34 54
             103:    7(fvec4) Load 102
             104:   29(fvec3) VectorShuffle 103 103 0 1 2
             105:     30(ptr) AccessChain 26 27 35
             106:    7(fvec4) Load 105
             107:   29(fvec3) VectorShuffle 106 106 2 2 2
             108:   29(fvec3) FMul 104 107
             109:    7(fvec4) Load 80
             110:   29(fvec3) VectorShuffle 109 109 0 1 2
             111:   29(fvec3) FAdd 108 110
             112:    7(fvec4) Load 80
             113:    7(fvec4) VectorShuffle 112 111 4 5 6 3
                              Store 80 113
             114:     30(ptr) AccessChain 26 34 67
             115:    7(fvec4) Load 114
             116:   29(fvec3) VectorShuffle 115 115 0 1 2
             117:     30(ptr) AccessChain 26 27 35
             118:    7(fvec4) Load 117
             119:   29(fvec3) VectorShuffle 118 118 3 3 3
             120:   29(fvec3) FMul 116 119
             121:    7(fvec4) Load 80
             122:   29(fvec3) VectorShuffle 121 121 0 1 2
             123:   29(fvec3) FAdd 120 122
             124:    7(fvec4) Load 80
             125:    7(fvec4) VectorShuffle 124 123 4 5 6 3
                              Store 80 125
             128:     30(ptr) AccessChain 26 27 54
             129:    7(fvec4) Load 128
             130:   29(fvec3) VectorShuffle 129 129 1 1 1
             131:     30(ptr) AccessChain 26 34 35
             132:    7(fvec4) Load 131
             133:   29(fvec3) VectorShuffle 132 132 0 1 2
             134:   29(fvec3) FMul 130 133
                              Store 127 134
             135:     30(ptr) AccessChain 26 34 28
             136:    7(fvec4) Load 135
             137:   29(fvec3) VectorShuffle 136 136 0 1 2
             138:     30(ptr) AccessChain 26 27 54
             139:    7(fvec4) Load 138
             140:   29(fvec3) VectorShuffle 139 139 0 0 0
             141:   29(fvec3) FMul 137 140
             142:   29(fvec3) Load 127
             143:   29(fvec3) FAdd 141 142
                              Store 127 143
             144:     30(ptr) AccessChain 26 34 54
             145:    7(fvec4) Load 144
             146:   29(fvec3) VectorShuffle 145 145 0 1 2
             147:     30(ptr) AccessChain 26 27 54
             148:    7(fvec4) Load 147
             149:   29(fvec3) VectorShuffle 148 148 2 2 2
             150:   29(fvec3) FMul 146 149
             151:   29(fvec3) Load 127
             152:   29(fvec3) FAdd 150 151
                              Store 127 152
             153:     30(ptr) AccessChain 26 34 67
             154:    7(fvec4) Load 153
             155:   29(fvec3) VectorShuffle 154 154 0 1 2
             156:     30(ptr) AccessChain 26 27 54
             157:    7(fvec4) Load 156
             158:   29(fvec3) VectorShuffle 157 157 3 3 3
             159:   29(fvec3) FMul 155 158
             160:   29(fvec3) Load 127
             161:   29(fvec3) FAdd 159 160
                              Store 127 161
             163:     30(ptr) AccessChain 26 27 67
             164:    7(fvec4) Load 163
             165:   29(fvec3) VectorShuffle 164 164 1 1 1
             166:     30(ptr) AccessChain 26 34 35
             167:    7(fvec4) Load 166
             168:   29(fvec3) VectorShuffle 167 167 0 1 2
             169:   29(fvec3) FMul 165 168
                              Store 162 169
             170:     30(ptr) AccessChain 26 34 28
             171:    7(fvec4) Load 170
             172:   29(fvec3) VectorShuffle 171 171 0 1 2
             173:     30(ptr) AccessChain 26 27 67
             174:    7(fvec4) Load 173
             175:   29(fvec3) VectorShuffle 174 174 0 0 0
             176:   29(fvec3) FMul 172 175
             177:   29(fvec3) Load 162
             178:   29(fvec3) FAdd 176 177
                              Store 162 178
             179:     30(ptr) AccessChain 26 34 54
             180:    7(fvec4) Load 179
             181:   29(fvec3) VectorShuffle 180 180 0 1 2
             182:     30(ptr) AccessChain 26 27 67
             183:    7(fvec4) Load 182
             184:   29(fvec3) VectorShuffle 183 183 2 2 2
             185:   29(fvec3) FMul 181 184
             186:   29(fvec3) Load 162
             187:   29(fvec3) FAdd 185 186
                              Store 162 187
             188:     30(ptr) AccessChain 26 34 67
             189:    7(fvec4) Load 188
             190:   29(fvec3) VectorShuffle 189 189 0 1 2
             191:     30(ptr) AccessChain 26 27 67
             192:    7(fvec4) Load 191
             193:   29(fvec3) VectorShuffle 192 192 3 3 3
             194:   29(fvec3) FMul 190 193
             195:   29(fvec3) Load 162
             196:   29(fvec3) FAdd 194 195
                              Store 162 196
             197:    7(fvec4) Load 80
             198:   29(fvec3) VectorShuffle 197 197 0 1 2
             201:   29(fvec3) Load 200
             202:   29(fvec3) VectorShuffle 201 201 1 1 1
             203:   29(fvec3) FMul 198 202
             204:    7(fvec4) Load 80
             205:    7(fvec4) VectorShuffle 204 203 4 5 6 3
                              Store 80 205
             206:    7(fvec4) Load 9
             207:   29(fvec3) VectorShuffle 206 206 0 1 2
             208:   29(fvec3) Load 200
             209:   29(fvec3) VectorShuffle 208 208 0 0 0
             210:   29(fvec3) FMul 207 209
             211:    7(fvec4) Load 80
             212:   29(fvec3) VectorShuffle 211 211 0 1 2
             213:   29(fvec3) FAdd 210 212
             214:    7(fvec4) Load 9
             215:    7(fvec4) VectorShuffle 214 213 4 5 6 3
                              Store 9 215
             216:   29(fvec3) Load 127
             217:   29(fvec3) Load 200
             218:   29(fvec3) VectorShuffle 217 217 2 2 2
             219:   29(fvec3) FMul 216 218
             220:    7(fvec4) Load 9
             221:   29(fvec3) VectorShuffle 220 220 0 1 2
             222:   29(fvec3) FAdd 219 221
             223:    7(fvec4) Load 9
             224:    7(fvec4) VectorShuffle 223 222 4 5 6 3
                              Store 9 224
             225:   29(fvec3) Load 162
             226:    7(fvec4) Load 9
             227:   29(fvec3) VectorShuffle 226 226 0 1 2
             228:   29(fvec3) FAdd 225 227
             229:    7(fvec4) Load 9
             230:    7(fvec4) VectorShuffle 229 228 4 5 6 3
                              Store 9 230
             232:     30(ptr) AccessChain 26 231 35
             233:    7(fvec4) Load 232
             234:   29(fvec3) VectorShuffle 233 233 0 1 2
             236:     30(ptr) AccessChain 26 235 28
             237:    7(fvec4) Load 236
             238:   29(fvec3) VectorShuffle 237 237 1 1 1
             239:   29(fvec3) FMul 234 238
             240:    7(fvec4) Load 80
             241:    7(fvec4) VectorShuffle 240 239 4 5 6 3
                              Store 80 241
             242:     30(ptr) AccessChain 26 231 28
             243:    7(fvec4) Load 242
             244:   29(fvec3) VectorShuffle 243 243 0 1 2
             245:     30(ptr) AccessChain 26 235 28
             246:    7(fvec4) Load 245
             247:   29(fvec3) VectorShuffle 246 246 0 0 0
             248:   29(fvec3) FMul 244 247
             249:    7(fvec4) Load 80
             250:   29(fvec3) VectorShuffle 249 249 0 1 2
             251:   29(fvec3) FAdd 248 250
             252:    7(fvec4) Load 80
             253:    7(fvec4) VectorShuffle 252 251 4 5 6 3
                              Store 80 253
             254:     30(ptr) AccessChain 26 231 54
             255:    7(fvec4) Load 254
             256:   29(fvec3) VectorShuffle 255 255 0 1 2
             257:     30(ptr) AccessChain 26 235 28
             258:    7(fvec4) Load 257
             259:   29(fvec3) VectorShuffle 258 258 2 2 2
             260:   29(fvec3) FMul 256 259
             261:    7(fvec4) Load 80
             262:   29(fvec3) VectorShuffle 261 261 0 1 2
             263:   29(fvec3) FAdd 260 262
             264:    7(fvec4) Load 80
             265:    7(fvec4) VectorShuffle 264 263 4 5 6 3
                              Store 80 265
             266:     30(ptr) AccessChain 26 231 67
             267:    7(fvec4) Load 266
             268:   29(fvec3) VectorShuffle 267 267 0 1 2
             269:     30(ptr) AccessChain 26 235 28
             270:    7(fvec4) Load 269
             271:   29(fvec3) VectorShuffle 270 270 3 3 3
             272:   29(fvec3) FMul 268 271
             273:    7(fvec4) Load 80
             274:   29(fvec3) VectorShuffle 273 273 0 1 2
             275:   29(fvec3) FAdd 272 274
             276:    7(fvec4) Load 80
             277:    7(fvec4) VectorShuffle 276 275 4 5 6 3
                              Store 80 277
             278:     30(ptr) AccessChain 26 231 35
             279:    7(fvec4) Load 278
             280:   29(fvec3) VectorShuffle 279 279 0 1 2
             281:     30(ptr) AccessChain 26 235 35
             282:    7(fvec4) Load 281
             283:   29(fvec3) VectorShuffle 282 282 1 1 1
             284:   29(fvec3) FMul 280 283
                              Store 127 284
             285:     30(ptr) AccessChain 26 231 28
             286:    7(fvec4) Load 285
             287:   29(fvec3) VectorShuffle 286 286 0 1 2
             288:     30(ptr) AccessChain 26 235 35
             289:    7(fvec4) Load 288
             290:   29(fvec3) VectorShuffle 289 289 0 0 0
             291:   29(fvec3) FMul 287 290
             292:   29(fvec3) Load 127
             293:   29(fvec3) FAdd 291 292
                              Store 127 293
             294:     30(ptr) AccessChain 26 231 54
             295:    7(fvec4) Load 294
             296:   29(fvec3) VectorShuffle 295 295 0 1 2
             297:     30(ptr) AccessChain 26 235 35
             298:    7(fvec4) Load 297
             299:   29(fvec3) VectorShuffle 298 298 2 2 2
             300:   29(fvec3) FMul 296 299
             301:   29(fvec3) Load 127
             302:   29(fvec3) FAdd 300 301
                              Store 127 302
             303:     30(ptr) AccessChain 26 231 67
             304:    7(fvec4) Load 303
             305:   29(fvec3) VectorShuffle 304 304 0 1 2
             306:     30(ptr) AccessChain 26 235 35
             307:    7(fvec4) Load 306
             308:   29(fvec3) VectorShuffle 307 307 3 3 3
             309:   29(fvec3) FMul 305 308
             310:   29(fvec3) Load 127
             311:   29(fvec3) FAdd 309 310
                              Store 127 311
             312:     30(ptr) AccessChain 26 231 35
             313:    7(fvec4) Load 312
             314:   29(fvec3) VectorShuffle 313 313 0 1 2
             315:     30(ptr) AccessChain 26 235 54
             316:    7(fvec4) Load 315
             317:   29(fvec3) VectorShuffle 316 316 1 1 1
             318:   29(fvec3) FMul 314 317
                              Store 162 318
             319:     30(ptr) AccessChain 26 231 28
             320:    7(fvec4) Load 319
             321:   29(fvec3) VectorShuffle 320 320 0 1 2
             322:     30(ptr) AccessChain 26 235 54
             323:    7(fvec4) Load 322
             324:   29(fvec3) VectorShuffle 323 323 0 0 0
             325:   29(fvec3) FMul 321 324
             326:   29(fvec3) Load 162
             327:   29(fvec3) FAdd 325 326
                              Store 162 327
             328:     30(ptr) AccessChain 26 231 54
             329:    7(fvec4) Load 328
             330:   29(fvec3) VectorShuffle 329 329 0 1 2
             331:     30(ptr) AccessChain 26 235 54
             332:    7(fvec4) Load 331
             333:   29(fvec3) VectorShuffle 332 332 2 2 2
             334:   29(fvec3) FMul 330 333
             335:   29(fvec3) Load 162
             336:   29(fvec3) FAdd 334 335
                              Store 162 336
             337:     30(ptr) AccessChain 26 231 67
             338:    7(fvec4) Load 337
             339:   29(fvec3) VectorShuffle 338 338 0 1 2
             340:     30(ptr) AccessChain 26 235 54
             341:    7(fvec4) Load 340
             342:   29(fvec3) VectorShuffle 341 341 3 3 3
             343:   29(fvec3) FMul 339 342
             344:   29(fvec3) Load 162
             345:   29(fvec3) FAdd 343 344
                              Store 162 345
             346:    7(fvec4) Load 80
             347:   29(fvec3) VectorShuffle 346 346 0 1 2
             349:   29(fvec3) Load 348
             350:    6(float) Dot 347 349
             353:    352(ptr) AccessChain 80 351
                              Store 353 350
             354:   29(fvec3) Load 127
             355:   29(fvec3) Load 348
             356:    6(float) Dot 354 355
             358:    352(ptr) AccessChain 80 357
                              Store 358 356
             359:   29(fvec3) Load 162
             360:   29(fvec3) Load 348
             361:    6(float) Dot 359 360
             363:    352(ptr) AccessChain 80 362
                              Store 363 361
             365:    7(fvec4) Load 80
             366:   29(fvec3) VectorShuffle 365 365 0 1 2
             367:    7(fvec4) Load 80
             368:   29(fvec3) VectorShuffle 367 367 0 1 2
             369:    6(float) Dot 366 368
                              Store 364 369
             370:    6(float) Load 364
             371:    6(float) ExtInst 1(GLSL.std.450) 32(InverseSqrt) 370
                              Store 364 371
             372:    6(float) Load 364
             373:   29(fvec3) CompositeConstruct 372 372 372
             374:    7(fvec4) Load 80
             375:   29(fvec3) VectorShuffle 374 374 0 1 2
             376:   29(fvec3) FMul 373 375
             377:    7(fvec4) Load 80
             378:    7(fvec4) VectorShuffle 377 376 4 5 6 3
                              Store 80 378
             381:    352(ptr) AccessChain 379 351
                              Store 381 380
             382:    352(ptr) AccessChain 379 357
                              Store 382 380
             383:    352(ptr) AccessChain 379 362
                              Store 383 380
                              Store 385 28
                              Branch 386
             386:             Label
                              LoopMerge 388 389 None
                              Branch 390
             390:             Label
             391:     22(int) Load 385
             394:    393(ptr) AccessChain 26 392 351
             395:     22(int) Load 394
             397:   396(bool) SLessThan 391 395
                              BranchConditional 397 387 388
             387:               Label
             398:    7(fvec4)   Load 9
             399:   29(fvec3)   VectorShuffle 398 398 0 1 2
             400:   29(fvec3)   FNegate 399
             401:     22(int)   Load 385
             402:     30(ptr)   AccessChain 26 35 401
             403:    7(fvec4)   Load 402
             404:   29(fvec3)   VectorShuffle 403 403 3 3 3
             405:   29(fvec3)   FMul 400 404
             406:     22(int)   Load 385
             407:     30(ptr)   AccessChain 26 35 406
             408:    7(fvec4)   Load 407
             409:   29(fvec3)   VectorShuffle 408 408 0 1 2
             410:   29(fvec3)   FAdd 405 409
                                Store 127 410
             412:   29(fvec3)   Load 127
             413:   29(fvec3)   Load 127
             414:    6(float)   Dot 412 413
                                Store 411 414
             416:     22(int)   Load 385
             418:    417(ptr)   AccessChain 26 54 416 362
             419:    6(float)   Load 418
             420:    6(float)   Load 411
             421:    6(float)   FMul 419 420
             423:    6(float)   FAdd 421 422
                                Store 415 423
             424:    6(float)   Load 415
             425:    6(float)   FDiv 422 424
                                Store 415 425
             428:     22(int)   Load 385
             430:    417(ptr)   AccessChain 26 35 428 429
             431:    6(float)   Load 430
             432:   396(bool)   FOrdNotEqual 380 431
                                Store 427 432
             434:     22(int)   Load 385
             435:    417(ptr)   AccessChain 26 54 434 429
             436:    6(float)   Load 435
             437:    6(float)   Load 411
             438:   396(bool)   FOrdLessThan 436 437
                                Store 433 438
             439:   396(bool)   Load 433
             440:   396(bool)   Load 427
             441:   396(bool)   LogicalAnd 439 440
                                Store 427 441
             445:   396(bool)   Load 427
                                SelectionMerge 447 None
                                BranchConditional 445 446 448
             446:                 Label
                                  Store 444 380
                                  Branch 447
             448:                 Label
             449:    6(float)     Load 415
                                  Store 444 449
                                  Branch 447
             447:               Label
             450:    6(float)   Load 444
                                Store 442 450
             451:    6(float)   Load 411
             453:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 451 452
                                Store 411 453
             454:    6(float)   Load 411
             455:    6(float)   ExtInst 1(GLSL.std.450) 32(InverseSqrt) 454
                                Store 411 455
             456:    6(float)   Load 411
             457:   29(fvec3)   CompositeConstruct 456 456 456
             458:   29(fvec3)   Load 127
             459:   29(fvec3)   FMul 457 458
                                Store 127 459
             460:   29(fvec3)   Load 127
             461:     22(int)   Load 385
             462:     30(ptr)   AccessChain 26 67 461
             463:    7(fvec4)   Load 462
             464:   29(fvec3)   VectorShuffle 463 463 0 1 2
             465:    6(float)   Dot 460 464
                                Store 411 465
             466:    6(float)   Load 411
             467:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 466 380
                                Store 411 467
             469:    6(float)   Load 411
             470:     22(int)   Load 385
             471:    417(ptr)   AccessChain 26 54 470 351
             472:    6(float)   Load 471
             473:    6(float)   FNegate 472
             474:    6(float)   FAdd 469 473
             475:    352(ptr)   AccessChain 468 351
                                Store 475 474
             476:    352(ptr)   AccessChain 468 351
             477:    6(float)   Load 476
             478:     22(int)   Load 385
             479:    417(ptr)   AccessChain 26 54 478 357
             480:    6(float)   Load 479
             481:    6(float)   FMul 477 480
             482:    352(ptr)   AccessChain 468 351
                                Store 482 481
             483:    352(ptr)   AccessChain 468 351
             484:    6(float)   Load 483
             485:    6(float)   ExtInst 1(GLSL.std.450) 43(FClamp) 484 380 422
             486:    352(ptr)   AccessChain 468 351
                                Store 486 485
             487:    6(float)   Load 442
             488:    352(ptr)   AccessChain 468 351
             489:    6(float)   Load 488
             490:    6(float)   FMul 487 489
                                Store 442 490
             491:    6(float)   Load 442
             493:    6(float)   FMul 491 492
                                Store 442 493
             494:    7(fvec4)   Load 80
             495:   29(fvec3)   VectorShuffle 494 494 0 1 2
             496:   29(fvec3)   Load 127
             497:    6(float)   Dot 495 496
             498:    352(ptr)   AccessChain 468 351
                                Store 498 497
             499:    352(ptr)   AccessChain 468 351
             500:    6(float)   Load 499
             501:    6(float)   ExtInst 1(GLSL.std.450) 40(FMax) 500 380
             502:    352(ptr)   AccessChain 468 351
                                Store 502 501
             503:   29(fvec3)   Load 468
             504:   29(fvec3)   VectorShuffle 503 503 0 0 0
             506:     30(ptr)   AccessChain 26 505
             507:    7(fvec4)   Load 506
             508:   29(fvec3)   VectorShuffle 507 507 0 1 2
             509:   29(fvec3)   FMul 504 508
                                Store 468 509
             510:   29(fvec3)   Load 468
             511:     22(int)   Load 385
             512:     30(ptr)   AccessChain 26 28 511
             513:    7(fvec4)   Load 512
             514:   29(fvec3)   VectorShuffle 513 513 0 1 2
             515:   29(fvec3)   FMul 510 514
                                Store 468 515
             516:    6(float)   Load 442
             517:   29(fvec3)   CompositeConstruct 516 516 516
             518:   29(fvec3)   Load 468
             519:   29(fvec3)   FMul 517 518
                                Store 468 519
             520:   29(fvec3)   Load 468
             522:   29(fvec3)   ExtInst 1(GLSL.std.450) 37(FMin) 520 521
                                Store 468 522
             523:   29(fvec3)   Load 379
             524:   29(fvec3)   Load 468
             525:   29(fvec3)   FAdd 523 524
                                Store 379 525
                                Branch 389
             389:               Label
             526:     22(int)   Load 385
             527:     22(int)   IAdd 526 35
                                Store 385 527
                                Branch 386
             388:             Label
             530:   29(fvec3) Load 379
             531:    7(fvec4) Load 529
             532:    7(fvec4) VectorShuffle 531 530 4 5 6 3
                              Store 529 532
             533:    7(fvec4) Load 529
             534:   29(fvec3) VectorShuffle 533 533 0 1 2
             535:   29(fvec3) CompositeConstruct 380 380 380
             536:   29(fvec3) CompositeConstruct 422 422 422
             537:   29(fvec3) ExtInst 1(GLSL.std.450) 43(FClamp) 534 535 536
             538:    7(fvec4) Load 529
             539:    7(fvec4) VectorShuffle 538 537 4 5 6 3
                              Store 529 539
             540:    417(ptr) AccessChain 26 505 429
             541:    6(float) Load 540
             543:    542(ptr) AccessChain 529 429
                              Store 543 541
             544:    542(ptr) AccessChain 529 429
             545:    6(float) Load 544
             546:    6(float) ExtInst 1(GLSL.std.450) 43(FClamp) 545 380 422
             547:    542(ptr) AccessChain 529 429
                              Store 547 546
             552:   29(fvec3) Load 551
             553:  548(fvec2) VectorShuffle 552 552 0 1
             555:     30(ptr) AccessChain 26 554
             556:    7(fvec4) Load 555
             557:  548(fvec2) VectorShuffle 556 556 0 1
             558:  548(fvec2) FMul 553 557
             559:     30(ptr) AccessChain 26 554
             560:    7(fvec4) Load 559
             561:  548(fvec2) VectorShuffle 560 560 2 3
             562:  548(fvec2) FAdd 558 561
                              Store 550 562
             563:   29(fvec3) Load 200
             564:    7(fvec4) VectorShuffle 563 563 1 1 1 1
             565:     30(ptr) AccessChain 26 27 35
             566:    7(fvec4) Load 565
             567:    7(fvec4) FMul 564 566
                              Store 9 567
             568:     30(ptr) AccessChain 26 27 28
             569:    7(fvec4) Load 568
             570:   29(fvec3) Load 200
             571:    7(fvec4) VectorShuffle 570 570 0 0 0 0
             572:    7(fvec4) FMul 569 571
             573:    7(fvec4) Load 9
             574:    7(fvec4) FAdd 572 573
                              Store 9 574
             575:     30(ptr) AccessChain 26 27 54
             576:    7(fvec4) Load 575
             577:   29(fvec3) Load 200
             578:    7(fvec4) VectorShuffle 577 577 2 2 2 2
             579:    7(fvec4) FMul 576 578
             580:    7(fvec4) Load 9
             581:    7(fvec4) FAdd 579 580
                              Store 9 581
             582:    7(fvec4) Load 9
             583:     30(ptr) AccessChain 26 27 67
             584:    7(fvec4) Load 583
             585:    7(fvec4) FAdd 582 584
                              Store 9 585
             586:    7(fvec4) Load 9
             587:    7(fvec4) VectorShuffle 586 586 1 1 1 1
             589:     30(ptr) AccessChain 26 588 35
             590:    7(fvec4) Load 589
             591:    7(fvec4) FMul 587 590
                              Store 80 591
             592:     30(ptr) AccessChain 26 588 28
             593:    7(fvec4) Load 592
             594:    7(fvec4) Load 9
             595:    7(fvec4) VectorShuffle 594 594 0 0 0 0
             596:    7(fvec4) FMul 593 595
             597:    7(fvec4) Load 80
             598:    7(fvec4) FAdd 596 597
                              Store 80 598
             599:     30(ptr) AccessChain 26 588 54
             600:    7(fvec4) Load 599
             601:    7(fvec4) Load 9
             602:    7(fvec4) VectorShuffle 601 601 2 2 2 2
             603:    7(fvec4) FMul 600 602
             604:    7(fvec4) Load 80
             605:    7(fvec4) FAdd 603 604
                              Store 80 605
             610:     30(ptr) AccessChain 26 588 67
             611:    7(fvec4) Load 610
             612:    7(fvec4) Load 9
             613:    7(fvec4) VectorShuffle 612 612 3 3 3 3
             614:    7(fvec4) FMul 611 613
             615:    7(fvec4) Load 80
             616:    7(fvec4) FAdd 614 615
             617:    528(ptr) AccessChain 609 28
                              Store 617 616
             618:    542(ptr) AccessChain 609 28 357
             619:    6(float) Load 618
             620:    6(float) FNegate 619
             621:    542(ptr) AccessChain 609 28 357
                              Store 621 620
                              Return
                              FunctionEnd

Disassembly for Fragment:
// Module Version 10000
// Generated by (magic number): 80001
// Id's are bound by 54

                              Capability Shader
               1:             ExtInstImport  "GLSL.std.450"
                              MemoryModel Logical GLSL450
                              EntryPoint Fragment 4  "main" 17 26 31
                              ExecutionMode 4 OriginUpperLeft
                              Decorate 9 RelaxedPrecision
                              Decorate 13 RelaxedPrecision
                              Decorate 13 DescriptorSet 0
                              Decorate 13 Binding 0
                              Decorate 14 RelaxedPrecision
                              Decorate 17 Location 1
                              Decorate 22 RelaxedPrecision
                              Decorate 23 RelaxedPrecision
                              Decorate 24 RelaxedPrecision
                              Decorate 26 RelaxedPrecision
                              Decorate 26 Location 0
                              Decorate 27 RelaxedPrecision
                              Decorate 28 RelaxedPrecision
                              Decorate 29 RelaxedPrecision
                              Decorate 31 RelaxedPrecision
                              Decorate 31 Location 0
                              Decorate 36 RelaxedPrecision
                              MemberDecorate 37 0 RelaxedPrecision
                              MemberDecorate 37 0 Offset 0
                              Decorate 37 Block
                              Decorate 39 DescriptorSet 1
                              Decorate 39 Binding 0
                              Decorate 44 RelaxedPrecision
                              Decorate 45 RelaxedPrecision
                              Decorate 48 RelaxedPrecision
                              Decorate 49 RelaxedPrecision
                              Decorate 50 RelaxedPrecision
               2:             TypeVoid
               3:             TypeFunction 2
               6:             TypeFloat 32
               7:             TypeVector 6(float) 4
               8:             TypePointer Private 7(fvec4)
               9:      8(ptr) Variable Private
              10:             TypeImage 6(float) 2D sampled format:Unknown
              11:             TypeSampledImage 10
              12:             TypePointer UniformConstant 11
              13:     12(ptr) Variable UniformConstant
              15:             TypeVector 6(float) 2
              16:             TypePointer Input 15(fvec2)
              17:     16(ptr) Variable Input
              20:             TypeVector 6(float) 3
              21:             TypePointer Private 20(fvec3)
              22:     21(ptr) Variable Private
              25:             TypePointer Input 7(fvec4)
              26:     25(ptr) Variable Input
              30:             TypePointer Output 7(fvec4)
              31:     30(ptr) Variable Output
              32:             TypeInt 32 0
              33:     32(int) Constant 3
              34:             TypePointer Private 6(float)
              37:             TypeStruct 7(fvec4)
              38:             TypePointer Uniform 37(struct)
              39:     38(ptr) Variable Uniform
              40:             TypeInt 32 1
              41:     40(int) Constant 0
              42:             TypePointer Uniform 6(float)
              46:             TypePointer Output 6(float)
               4:           2 Function None 3
               5:             Label
              14:          11 Load 13
              18:   15(fvec2) Load 17
              19:    7(fvec4) ImageSampleImplicitLod 14 18
                              Store 9 19
              23:    7(fvec4) Load 9
              24:   20(fvec3) VectorShuffle 23 23 0 1 2
              27:    7(fvec4) Load 26
              28:   20(fvec3) VectorShuffle 27 27 0 1 2
              29:   20(fvec3) FMul 24 28
                              Store 22 29
              35:     34(ptr) AccessChain 9 33
              36:    6(float) Load 35
              43:     42(ptr) AccessChain 39 41 33
              44:    6(float) Load 43
              45:    6(float) FMul 36 44
              47:     46(ptr) AccessChain 31 33
                              Store 47 45
              48:   20(fvec3) Load 22
              49:   20(fvec3) Load 22
              50:   20(fvec3) FAdd 48 49
              51:    7(fvec4) Load 31
              52:    7(fvec4) VectorShuffle 51 50 4 5 6 3
                              Store 31 52
                              Return
                              FunctionEnd

Disassembly for Hull:
Not present.



-- Fragment shader for "vulkan":
Shader Disassembly:
 

 }
}
Fallback "VertexLit"
}